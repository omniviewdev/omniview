// AUTOGENERATED FILE: Do not edit.
package resource

import (
	"github.com/omniview/kubernetes/pkg/plugin/resource/clients"
	"github.com/omniview/kubernetes/pkg/plugin/resource/resourcers"
	"github.com/omniviewdev/plugin-sdk/pkg/resource/types"
	"github.com/omniviewdev/plugin-sdk/pkg/sdk"
	"go.uber.org/zap"

	admissionregistrationv1 "k8s.io/api/admissionregistration/v1"
	admissionregistrationv1beta1 "k8s.io/api/admissionregistration/v1beta1"
	appsv1 "k8s.io/api/apps/v1"
	authenticationv1 "k8s.io/api/authentication/v1"
	authenticationv1beta1 "k8s.io/api/authentication/v1beta1"
	authorizationv1 "k8s.io/api/authorization/v1"
	autoscalingv1 "k8s.io/api/autoscaling/v1"
	autoscalingv2 "k8s.io/api/autoscaling/v2"
	autoscalingv2beta2 "k8s.io/api/autoscaling/v2beta2"
	batchv1 "k8s.io/api/batch/v1"
	certificatesv1 "k8s.io/api/certificates/v1"
	certificatesv1beta1 "k8s.io/api/certificates/v1beta1"
	coordinationv1 "k8s.io/api/coordination/v1"
	coordinationv1beta1 "k8s.io/api/coordination/v1beta1"
	corev1 "k8s.io/api/core/v1"
	discoveryv1 "k8s.io/api/discovery/v1"
	eventsv1 "k8s.io/api/events/v1"
	flowcontrolv1 "k8s.io/api/flowcontrol/v1"
	flowcontrolv1beta1 "k8s.io/api/flowcontrol/v1beta1"
	flowcontrolv1beta2 "k8s.io/api/flowcontrol/v1beta2"
	flowcontrolv1beta3 "k8s.io/api/flowcontrol/v1beta3"
	networkingv1 "k8s.io/api/networking/v1"
	networkingv1beta1 "k8s.io/api/networking/v1beta1"
	nodev1 "k8s.io/api/node/v1"
	policyv1 "k8s.io/api/policy/v1"
	rbacv1 "k8s.io/api/rbac/v1"
	resourcev1beta1 "k8s.io/api/resource/v1beta1"
	resourcev1beta2 "k8s.io/api/resource/v1beta2"
	schedulingv1 "k8s.io/api/scheduling/v1"
	storagev1 "k8s.io/api/storage/v1"
	storagev1beta1 "k8s.io/api/storage/v1beta1"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/client-go/dynamic/dynamicinformer"
	apiregistrationv1 "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1"
)

// map of the resource strings to their schema.GroupVersionResource
//
//nolint:lll,gochecknoglobals // autogenerated code that's required for each resource
var resourceMap = map[string]schema.GroupVersionResource{
	"admissionregistration::v1beta1::ValidatingAdmissionPolicy":        admissionregistrationv1beta1.SchemeGroupVersion.WithResource("validatingadmissionpolicies"),
	"admissionregistration::v1beta1::ValidatingAdmissionPolicyBinding": admissionregistrationv1beta1.SchemeGroupVersion.WithResource("validatingadmissionpolicybindings"),
	"admissionregistration::v1::MutatingWebhookConfiguration":          admissionregistrationv1.SchemeGroupVersion.WithResource("mutatingwebhookconfigurations"),
	"admissionregistration::v1::ValidatingAdmissionPolicy":             admissionregistrationv1.SchemeGroupVersion.WithResource("validatingadmissionpolicies"),
	"admissionregistration::v1::ValidatingAdmissionPolicyBinding":      admissionregistrationv1.SchemeGroupVersion.WithResource("validatingadmissionpolicybindings"),
	"admissionregistration::v1::ValidatingWebhookConfiguration":        admissionregistrationv1.SchemeGroupVersion.WithResource("validatingwebhookconfigurations"),
	"apiextensions::v1::CustomResourceDefinition":                      apiextensionsv1.SchemeGroupVersion.WithResource("customresourcedefinitions"),
	"apiregistration::v1::APIService":                                  apiregistrationv1.SchemeGroupVersion.WithResource("apiservices"),
	"apps::v1::ControllerRevision":                                     appsv1.SchemeGroupVersion.WithResource("controllerrevisions"),
	"apps::v1::DaemonSet":                                              appsv1.SchemeGroupVersion.WithResource("daemonsets"),
	"apps::v1::Deployment":                                             appsv1.SchemeGroupVersion.WithResource("deployments"),
	"apps::v1::ReplicaSet":                                             appsv1.SchemeGroupVersion.WithResource("replicasets"),
	"apps::v1::StatefulSet":                                            appsv1.SchemeGroupVersion.WithResource("statefulsets"),
	"authentication::v1beta1::SelfSubjectReview":                       authenticationv1beta1.SchemeGroupVersion.WithResource("selfsubjectreviews"),
	"authentication::v1::SelfSubjectReview":                            authenticationv1.SchemeGroupVersion.WithResource("selfsubjectreviews"),
	"authentication::v1::TokenRequest":                                 authenticationv1.SchemeGroupVersion.WithResource("tokenrequests"),
	"authentication::v1::TokenReview":                                  authenticationv1.SchemeGroupVersion.WithResource("tokenreviews"),
	"authorization::v1::LocalSubjectAccessReview":                      authorizationv1.SchemeGroupVersion.WithResource("localsubjectaccessreviews"),
	"authorization::v1::SelfSubjectAccessReview":                       authorizationv1.SchemeGroupVersion.WithResource("selfsubjectaccessreviews"),
	"authorization::v1::SelfSubjectRulesReview":                        authorizationv1.SchemeGroupVersion.WithResource("selfsubjectrulesreviews"),
	"authorization::v1::SubjectAccessReview":                           authorizationv1.SchemeGroupVersion.WithResource("subjectaccessreviews"),
	"autoscaling::v2beta2::HorizontalPodAutoscaler":                    autoscalingv2beta2.SchemeGroupVersion.WithResource("horizontalpodautoscalers"),
	"autoscaling::v2::HorizontalPodAutoscaler":                         autoscalingv2.SchemeGroupVersion.WithResource("horizontalpodautoscalers"),
	"autoscaling::v1::HorizontalPodAutoscaler":                         autoscalingv1.SchemeGroupVersion.WithResource("horizontalpodautoscalers"),
	"autoscaling::v1::Scale":                                           autoscalingv1.SchemeGroupVersion.WithResource("scales"),
	"batch::v1::CronJob":                                               batchv1.SchemeGroupVersion.WithResource("cronjobs"),
	"batch::v1::Job":                                                   batchv1.SchemeGroupVersion.WithResource("jobs"),
	"certificates::v1beta1::ClusterTrustBundle":                        certificatesv1beta1.SchemeGroupVersion.WithResource("clustertrustbundles"),
	"certificates::v1::CertificateSigningRequest":                      certificatesv1.SchemeGroupVersion.WithResource("certificatesigningrequests"),
	"coordination::v1beta1::LeaseCandidate":                            coordinationv1beta1.SchemeGroupVersion.WithResource("leasecandidates"),
	"coordination::v1::Lease":                                          coordinationv1.SchemeGroupVersion.WithResource("leases"),
	"core::v1::Binding":                                                corev1.SchemeGroupVersion.WithResource("bindings"),
	"core::v1::ComponentStatus":                                        corev1.SchemeGroupVersion.WithResource("componentstatuses"),
	"core::v1::ConfigMap":                                              corev1.SchemeGroupVersion.WithResource("configmaps"),
	"core::v1::Endpoints":                                              corev1.SchemeGroupVersion.WithResource("endpoints"),
	"core::v1::Event":                                                  corev1.SchemeGroupVersion.WithResource("events"),
	"core::v1::LimitRange":                                             corev1.SchemeGroupVersion.WithResource("limitranges"),
	"core::v1::Namespace":                                              corev1.SchemeGroupVersion.WithResource("namespaces"),
	"core::v1::Node":                                                   corev1.SchemeGroupVersion.WithResource("nodes"),
	"core::v1::PersistentVolume":                                       corev1.SchemeGroupVersion.WithResource("persistentvolumes"),
	"core::v1::PersistentVolumeClaim":                                  corev1.SchemeGroupVersion.WithResource("persistentvolumeclaims"),
	"core::v1::Pod":                                                    corev1.SchemeGroupVersion.WithResource("pods"),
	"core::v1::PodTemplate":                                            corev1.SchemeGroupVersion.WithResource("podtemplates"),
	"core::v1::ReplicationController":                                  corev1.SchemeGroupVersion.WithResource("replicationcontrollers"),
	"core::v1::ResourceQuota":                                          corev1.SchemeGroupVersion.WithResource("resourcequotas"),
	"core::v1::Secret":                                                 corev1.SchemeGroupVersion.WithResource("secrets"),
	"core::v1::Service":                                                corev1.SchemeGroupVersion.WithResource("services"),
	"core::v1::ServiceAccount":                                         corev1.SchemeGroupVersion.WithResource("serviceaccounts"),
	"core::v1::Status":                                                 corev1.SchemeGroupVersion.WithResource("statuses"),
	"discovery::v1::EndpointSlice":                                     discoveryv1.SchemeGroupVersion.WithResource("endpointslices"),
	"events::v1::Event":                                                eventsv1.SchemeGroupVersion.WithResource("events"),
	"flowcontrol::v1beta3::FlowSchema":                                 flowcontrolv1beta3.SchemeGroupVersion.WithResource("flowschemas"),
	"flowcontrol::v1beta3::PriorityLevelConfiguration":                 flowcontrolv1beta3.SchemeGroupVersion.WithResource("prioritylevelconfigurations"),
	"flowcontrol::v1beta2::FlowSchema":                                 flowcontrolv1beta2.SchemeGroupVersion.WithResource("flowschemas"),
	"flowcontrol::v1beta2::PriorityLevelConfiguration":                 flowcontrolv1beta2.SchemeGroupVersion.WithResource("prioritylevelconfigurations"),
	"flowcontrol::v1beta1::FlowSchema":                                 flowcontrolv1beta1.SchemeGroupVersion.WithResource("flowschemas"),
	"flowcontrol::v1beta1::PriorityLevelConfiguration":                 flowcontrolv1beta1.SchemeGroupVersion.WithResource("prioritylevelconfigurations"),
	"flowcontrol::v1::FlowSchema":                                      flowcontrolv1.SchemeGroupVersion.WithResource("flowschemas"),
	"flowcontrol::v1::PriorityLevelConfiguration":                      flowcontrolv1.SchemeGroupVersion.WithResource("prioritylevelconfigurations"),
	"networking::v1beta1::IPAddress":                                   networkingv1beta1.SchemeGroupVersion.WithResource("ipaddresses"),
	"networking::v1beta1::ServiceCIDR":                                 networkingv1beta1.SchemeGroupVersion.WithResource("servicecidrs"),
	"networking::v1::IPAddress":                                        networkingv1.SchemeGroupVersion.WithResource("ipaddresses"),
	"networking::v1::Ingress":                                          networkingv1.SchemeGroupVersion.WithResource("ingresses"),
	"networking::v1::IngressClass":                                     networkingv1.SchemeGroupVersion.WithResource("ingressclasses"),
	"networking::v1::NetworkPolicy":                                    networkingv1.SchemeGroupVersion.WithResource("networkpolicies"),
	"networking::v1::ServiceCIDR":                                      networkingv1.SchemeGroupVersion.WithResource("servicecidrs"),
	"node::v1::RuntimeClass":                                           nodev1.SchemeGroupVersion.WithResource("runtimeclasses"),
	"policy::v1::Eviction":                                             policyv1.SchemeGroupVersion.WithResource("evictions"),
	"policy::v1::PodDisruptionBudget":                                  policyv1.SchemeGroupVersion.WithResource("poddisruptionbudgets"),
	"rbac::v1::ClusterRole":                                            rbacv1.SchemeGroupVersion.WithResource("clusterroles"),
	"rbac::v1::ClusterRoleBinding":                                     rbacv1.SchemeGroupVersion.WithResource("clusterrolebindings"),
	"rbac::v1::Role":                                                   rbacv1.SchemeGroupVersion.WithResource("roles"),
	"rbac::v1::RoleBinding":                                            rbacv1.SchemeGroupVersion.WithResource("rolebindings"),
	"resource::v1beta2::DeviceClass":                                   resourcev1beta2.SchemeGroupVersion.WithResource("deviceclasses"),
	"resource::v1beta2::ResourceClaim":                                 resourcev1beta2.SchemeGroupVersion.WithResource("resourceclaims"),
	"resource::v1beta2::ResourceClaimTemplate":                         resourcev1beta2.SchemeGroupVersion.WithResource("resourceclaimtemplates"),
	"resource::v1beta2::ResourceSlice":                                 resourcev1beta2.SchemeGroupVersion.WithResource("resourceslices"),
	"resource::v1beta1::DeviceClass":                                   resourcev1beta1.SchemeGroupVersion.WithResource("deviceclasses"),
	"resource::v1beta1::ResourceClaim":                                 resourcev1beta1.SchemeGroupVersion.WithResource("resourceclaims"),
	"resource::v1beta1::ResourceClaimTemplate":                         resourcev1beta1.SchemeGroupVersion.WithResource("resourceclaimtemplates"),
	"resource::v1beta1::ResourceSlice":                                 resourcev1beta1.SchemeGroupVersion.WithResource("resourceslices"),
	"scheduling::v1::PriorityClass":                                    schedulingv1.SchemeGroupVersion.WithResource("priorityclasses"),
	"storage::v1beta1::CSIStorageCapacity":                             storagev1beta1.SchemeGroupVersion.WithResource("csistoragecapacities"),
	"storage::v1beta1::VolumeAttributesClass":                          storagev1beta1.SchemeGroupVersion.WithResource("volumeattributesclasses"),
	"storage::v1::CSIDriver":                                           storagev1.SchemeGroupVersion.WithResource("csidrivers"),
	"storage::v1::CSINode":                                             storagev1.SchemeGroupVersion.WithResource("csinodes"),
	"storage::v1::CSIStorageCapacity":                                  storagev1.SchemeGroupVersion.WithResource("csistoragecapacities"),
	"storage::v1::StorageClass":                                        storagev1.SchemeGroupVersion.WithResource("storageclasses"),
	"storage::v1::VolumeAttachment":                                    storagev1.SchemeGroupVersion.WithResource("volumeattachments"),
}

//nolint:lll,gochecknoglobals // autogenerated code that's required for each resource
var gvrMap = map[schema.GroupVersionResource]string{
	admissionregistrationv1beta1.SchemeGroupVersion.WithResource("validatingadmissionpolicies"):       "admissionregistration::v1beta1::ValidatingAdmissionPolicy",
	admissionregistrationv1beta1.SchemeGroupVersion.WithResource("validatingadmissionpolicybindings"): "admissionregistration::v1beta1::ValidatingAdmissionPolicyBinding",
	admissionregistrationv1.SchemeGroupVersion.WithResource("mutatingwebhookconfigurations"):          "admissionregistration::v1::MutatingWebhookConfiguration",
	admissionregistrationv1.SchemeGroupVersion.WithResource("validatingadmissionpolicies"):            "admissionregistration::v1::ValidatingAdmissionPolicy",
	admissionregistrationv1.SchemeGroupVersion.WithResource("validatingadmissionpolicybindings"):      "admissionregistration::v1::ValidatingAdmissionPolicyBinding",
	admissionregistrationv1.SchemeGroupVersion.WithResource("validatingwebhookconfigurations"):        "admissionregistration::v1::ValidatingWebhookConfiguration",
	apiextensionsv1.SchemeGroupVersion.WithResource("customresourcedefinitions"):                      "apiextensions::v1::CustomResourceDefinition",
	apiregistrationv1.SchemeGroupVersion.WithResource("apiservices"):                                  "apiregistration::v1::APIService",
	appsv1.SchemeGroupVersion.WithResource("controllerrevisions"):                                     "apps::v1::ControllerRevision",
	appsv1.SchemeGroupVersion.WithResource("daemonsets"):                                              "apps::v1::DaemonSet",
	appsv1.SchemeGroupVersion.WithResource("deployments"):                                             "apps::v1::Deployment",
	appsv1.SchemeGroupVersion.WithResource("replicasets"):                                             "apps::v1::ReplicaSet",
	appsv1.SchemeGroupVersion.WithResource("statefulsets"):                                            "apps::v1::StatefulSet",
	authenticationv1beta1.SchemeGroupVersion.WithResource("selfsubjectreviews"):                       "authentication::v1beta1::SelfSubjectReview",
	authenticationv1.SchemeGroupVersion.WithResource("selfsubjectreviews"):                            "authentication::v1::SelfSubjectReview",
	authenticationv1.SchemeGroupVersion.WithResource("tokenrequests"):                                 "authentication::v1::TokenRequest",
	authenticationv1.SchemeGroupVersion.WithResource("tokenreviews"):                                  "authentication::v1::TokenReview",
	authorizationv1.SchemeGroupVersion.WithResource("localsubjectaccessreviews"):                      "authorization::v1::LocalSubjectAccessReview",
	authorizationv1.SchemeGroupVersion.WithResource("selfsubjectaccessreviews"):                       "authorization::v1::SelfSubjectAccessReview",
	authorizationv1.SchemeGroupVersion.WithResource("selfsubjectrulesreviews"):                        "authorization::v1::SelfSubjectRulesReview",
	authorizationv1.SchemeGroupVersion.WithResource("subjectaccessreviews"):                           "authorization::v1::SubjectAccessReview",
	autoscalingv2beta2.SchemeGroupVersion.WithResource("horizontalpodautoscalers"):                    "autoscaling::v2beta2::HorizontalPodAutoscaler",
	autoscalingv2.SchemeGroupVersion.WithResource("horizontalpodautoscalers"):                         "autoscaling::v2::HorizontalPodAutoscaler",
	autoscalingv1.SchemeGroupVersion.WithResource("horizontalpodautoscalers"):                         "autoscaling::v1::HorizontalPodAutoscaler",
	autoscalingv1.SchemeGroupVersion.WithResource("scales"):                                           "autoscaling::v1::Scale",
	batchv1.SchemeGroupVersion.WithResource("cronjobs"):                                               "batch::v1::CronJob",
	batchv1.SchemeGroupVersion.WithResource("jobs"):                                                   "batch::v1::Job",
	certificatesv1beta1.SchemeGroupVersion.WithResource("clustertrustbundles"):                        "certificates::v1beta1::ClusterTrustBundle",
	certificatesv1.SchemeGroupVersion.WithResource("certificatesigningrequests"):                      "certificates::v1::CertificateSigningRequest",
	coordinationv1beta1.SchemeGroupVersion.WithResource("leasecandidates"):                            "coordination::v1beta1::LeaseCandidate",
	coordinationv1.SchemeGroupVersion.WithResource("leases"):                                          "coordination::v1::Lease",
	corev1.SchemeGroupVersion.WithResource("bindings"):                                                "core::v1::Binding",
	corev1.SchemeGroupVersion.WithResource("componentstatuses"):                                       "core::v1::ComponentStatus",
	corev1.SchemeGroupVersion.WithResource("configmaps"):                                              "core::v1::ConfigMap",
	corev1.SchemeGroupVersion.WithResource("endpoints"):                                               "core::v1::Endpoints",
	corev1.SchemeGroupVersion.WithResource("events"):                                                  "core::v1::Event",
	corev1.SchemeGroupVersion.WithResource("limitranges"):                                             "core::v1::LimitRange",
	corev1.SchemeGroupVersion.WithResource("namespaces"):                                              "core::v1::Namespace",
	corev1.SchemeGroupVersion.WithResource("nodes"):                                                   "core::v1::Node",
	corev1.SchemeGroupVersion.WithResource("persistentvolumes"):                                       "core::v1::PersistentVolume",
	corev1.SchemeGroupVersion.WithResource("persistentvolumeclaims"):                                  "core::v1::PersistentVolumeClaim",
	corev1.SchemeGroupVersion.WithResource("pods"):                                                    "core::v1::Pod",
	corev1.SchemeGroupVersion.WithResource("podtemplates"):                                            "core::v1::PodTemplate",
	corev1.SchemeGroupVersion.WithResource("replicationcontrollers"):                                  "core::v1::ReplicationController",
	corev1.SchemeGroupVersion.WithResource("resourcequotas"):                                          "core::v1::ResourceQuota",
	corev1.SchemeGroupVersion.WithResource("secrets"):                                                 "core::v1::Secret",
	corev1.SchemeGroupVersion.WithResource("services"):                                                "core::v1::Service",
	corev1.SchemeGroupVersion.WithResource("serviceaccounts"):                                         "core::v1::ServiceAccount",
	corev1.SchemeGroupVersion.WithResource("statuses"):                                                "core::v1::Status",
	discoveryv1.SchemeGroupVersion.WithResource("endpointslices"):                                     "discovery::v1::EndpointSlice",
	eventsv1.SchemeGroupVersion.WithResource("events"):                                                "events::v1::Event",
	flowcontrolv1beta3.SchemeGroupVersion.WithResource("flowschemas"):                                 "flowcontrol::v1beta3::FlowSchema",
	flowcontrolv1beta3.SchemeGroupVersion.WithResource("prioritylevelconfigurations"):                 "flowcontrol::v1beta3::PriorityLevelConfiguration",
	flowcontrolv1beta2.SchemeGroupVersion.WithResource("flowschemas"):                                 "flowcontrol::v1beta2::FlowSchema",
	flowcontrolv1beta2.SchemeGroupVersion.WithResource("prioritylevelconfigurations"):                 "flowcontrol::v1beta2::PriorityLevelConfiguration",
	flowcontrolv1beta1.SchemeGroupVersion.WithResource("flowschemas"):                                 "flowcontrol::v1beta1::FlowSchema",
	flowcontrolv1beta1.SchemeGroupVersion.WithResource("prioritylevelconfigurations"):                 "flowcontrol::v1beta1::PriorityLevelConfiguration",
	flowcontrolv1.SchemeGroupVersion.WithResource("flowschemas"):                                      "flowcontrol::v1::FlowSchema",
	flowcontrolv1.SchemeGroupVersion.WithResource("prioritylevelconfigurations"):                      "flowcontrol::v1::PriorityLevelConfiguration",
	networkingv1beta1.SchemeGroupVersion.WithResource("ipaddresses"):                                  "networking::v1beta1::IPAddress",
	networkingv1beta1.SchemeGroupVersion.WithResource("servicecidrs"):                                 "networking::v1beta1::ServiceCIDR",
	networkingv1.SchemeGroupVersion.WithResource("ipaddresses"):                                       "networking::v1::IPAddress",
	networkingv1.SchemeGroupVersion.WithResource("ingresses"):                                         "networking::v1::Ingress",
	networkingv1.SchemeGroupVersion.WithResource("ingressclasses"):                                    "networking::v1::IngressClass",
	networkingv1.SchemeGroupVersion.WithResource("networkpolicies"):                                   "networking::v1::NetworkPolicy",
	networkingv1.SchemeGroupVersion.WithResource("servicecidrs"):                                      "networking::v1::ServiceCIDR",
	nodev1.SchemeGroupVersion.WithResource("runtimeclasses"):                                          "node::v1::RuntimeClass",
	policyv1.SchemeGroupVersion.WithResource("evictions"):                                             "policy::v1::Eviction",
	policyv1.SchemeGroupVersion.WithResource("poddisruptionbudgets"):                                  "policy::v1::PodDisruptionBudget",
	rbacv1.SchemeGroupVersion.WithResource("clusterroles"):                                            "rbac::v1::ClusterRole",
	rbacv1.SchemeGroupVersion.WithResource("clusterrolebindings"):                                     "rbac::v1::ClusterRoleBinding",
	rbacv1.SchemeGroupVersion.WithResource("roles"):                                                   "rbac::v1::Role",
	rbacv1.SchemeGroupVersion.WithResource("rolebindings"):                                            "rbac::v1::RoleBinding",
	resourcev1beta2.SchemeGroupVersion.WithResource("deviceclasses"):                                  "resource::v1beta2::DeviceClass",
	resourcev1beta2.SchemeGroupVersion.WithResource("resourceclaims"):                                 "resource::v1beta2::ResourceClaim",
	resourcev1beta2.SchemeGroupVersion.WithResource("resourceclaimtemplates"):                         "resource::v1beta2::ResourceClaimTemplate",
	resourcev1beta2.SchemeGroupVersion.WithResource("resourceslices"):                                 "resource::v1beta2::ResourceSlice",
	resourcev1beta1.SchemeGroupVersion.WithResource("deviceclasses"):                                  "resource::v1beta1::DeviceClass",
	resourcev1beta1.SchemeGroupVersion.WithResource("resourceclaims"):                                 "resource::v1beta1::ResourceClaim",
	resourcev1beta1.SchemeGroupVersion.WithResource("resourceclaimtemplates"):                         "resource::v1beta1::ResourceClaimTemplate",
	resourcev1beta1.SchemeGroupVersion.WithResource("resourceslices"):                                 "resource::v1beta1::ResourceSlice",
	schedulingv1.SchemeGroupVersion.WithResource("priorityclasses"):                                   "scheduling::v1::PriorityClass",
	storagev1beta1.SchemeGroupVersion.WithResource("csistoragecapacities"):                            "storage::v1beta1::CSIStorageCapacity",
	storagev1beta1.SchemeGroupVersion.WithResource("volumeattributesclasses"):                         "storage::v1beta1::VolumeAttributesClass",
	storagev1.SchemeGroupVersion.WithResource("csidrivers"):                                           "storage::v1::CSIDriver",
	storagev1.SchemeGroupVersion.WithResource("csinodes"):                                             "storage::v1::CSINode",
	storagev1.SchemeGroupVersion.WithResource("csistoragecapacities"):                                 "storage::v1::CSIStorageCapacity",
	storagev1.SchemeGroupVersion.WithResource("storageclasses"):                                       "storage::v1::StorageClass",
	storagev1.SchemeGroupVersion.WithResource("volumeattachments"):                                    "storage::v1::VolumeAttachment",
}

// Register registers the resource plugin with the plugin server.
//
//nolint:funlen // autogenerated code that's required for each resource
func Register(plugin *sdk.Plugin) {
	logger := zap.S()

	sdk.RegisterResourcePlugin(
		plugin,
		sdk.ResourcePluginOpts[clients.ClientSet, clients.DiscoveryClient, dynamicinformer.DynamicSharedInformerFactory]{
			ClientFactory:                clients.NewKubernetesClientFactory(),
			DiscoveryClientFactory:       clients.NewKubernetesDiscoverClientFactory(),
			DiscoveryFunc:                DiscoveryFunc,
			LoadConnectionFunc:           LoadConnectionsFunc,
			LoadConnectionNamespacesFunc: LoadConnectionNamespacesFunc,
			CheckConnectionFunc:          CheckConnectionFunc,
			InformerOpts:                 NewInformerOptions(),
			ResourceGroups:               ResourceGroups,
			ResourceDefinitions:          resourcers.ResourceDefs,
			DefaultResourceDefinition:    resourcers.DefaultResourceDef,
			DynamicResourcers: map[string]types.DynamicResourcer[clients.ClientSet]{
				"*": resourcers.NewKubernetesDynamicResourcer(logger),
			},
			Resourcers: map[types.ResourceMeta]types.Resourcer[clients.ClientSet]{
				{
					Group:       "admissionregistration",
					Version:     "v1beta1",
					Kind:        "ValidatingAdmissionPolicy",
					Description: `ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					admissionregistrationv1beta1.SchemeGroupVersion.WithResource("validatingadmissionpolicies"),
				),
				{
					Group:   "admissionregistration",
					Version: "v1beta1",
					Kind:    "ValidatingAdmissionPolicyBinding",
					Description: `ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.

For a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don&#39;t use params, otherwise N is the number of parameters selected by the binding.

The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget. Each evaluation of the policy is given an independent CEL cost budget. Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					admissionregistrationv1beta1.SchemeGroupVersion.WithResource("validatingadmissionpolicybindings"),
				),
				{
					Group:       "admissionregistration",
					Version:     "v1",
					Kind:        "MutatingWebhookConfiguration",
					Description: `MutatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and may change the object.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					admissionregistrationv1.SchemeGroupVersion.WithResource("mutatingwebhookconfigurations"),
				),
				{
					Group:       "admissionregistration",
					Version:     "v1",
					Kind:        "ValidatingAdmissionPolicy",
					Description: `ValidatingAdmissionPolicy describes the definition of an admission validation policy that accepts or rejects an object without changing it.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					admissionregistrationv1.SchemeGroupVersion.WithResource("validatingadmissionpolicies"),
				),
				{
					Group:   "admissionregistration",
					Version: "v1",
					Kind:    "ValidatingAdmissionPolicyBinding",
					Description: `ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs together define how cluster administrators configure policies for clusters.

For a given admission request, each binding will cause its policy to be evaluated N times, where N is 1 for policies/bindings that don&#39;t use params, otherwise N is the number of parameters selected by the binding.

The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget. Each evaluation of the policy is given an independent CEL cost budget. Adding/removing policies, bindings, or params can not affect whether a given (policy, binding, param) combination is within its own CEL budget.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					admissionregistrationv1.SchemeGroupVersion.WithResource("validatingadmissionpolicybindings"),
				),
				{
					Group:       "admissionregistration",
					Version:     "v1",
					Kind:        "ValidatingWebhookConfiguration",
					Description: `ValidatingWebhookConfiguration describes the configuration of and admission webhook that accept or reject and object without changing it.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					admissionregistrationv1.SchemeGroupVersion.WithResource("validatingwebhookconfigurations"),
				),
				{
					Group:       "apiextensions",
					Version:     "v1",
					Kind:        "CustomResourceDefinition",
					Description: `CustomResourceDefinition represents a resource that should be exposed on the API server.  Its name MUST be in the format &lt;.spec.name&gt;.&lt;.spec.group&gt;.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					apiextensionsv1.SchemeGroupVersion.WithResource("customresourcedefinitions"),
				),
				{
					Group:       "apiregistration",
					Version:     "v1",
					Kind:        "APIService",
					Description: `APIService represents a server for a particular GroupVersion. Name must be &#34;version.group&#34;.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					apiregistrationv1.SchemeGroupVersion.WithResource("apiservices"),
				),
				{
					Group:       "apps",
					Version:     "v1",
					Kind:        "ControllerRevision",
					Description: `ControllerRevision implements an immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validation of all requests that attempt to mutate the Data field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					appsv1.SchemeGroupVersion.WithResource("controllerrevisions"),
				),
				{
					Group:       "apps",
					Version:     "v1",
					Kind:        "DaemonSet",
					Description: `DaemonSet represents the configuration of a daemon set.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					appsv1.SchemeGroupVersion.WithResource("daemonsets"),
				),
				{
					Group:       "apps",
					Version:     "v1",
					Kind:        "Deployment",
					Description: `Deployment enables declarative updates for Pods and ReplicaSets.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					appsv1.SchemeGroupVersion.WithResource("deployments"),
				),
				{
					Group:       "apps",
					Version:     "v1",
					Kind:        "ReplicaSet",
					Description: `ReplicaSet ensures that a specified number of pod replicas are running at any given time.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					appsv1.SchemeGroupVersion.WithResource("replicasets"),
				),
				{
					Group:   "apps",
					Version: "v1",
					Kind:    "StatefulSet",
					Description: `StatefulSet represents a set of pods with consistent identities. Identities are defined as:
  - Network: A single stable DNS and hostname.
  - Storage: As many VolumeClaims as requested.

The StatefulSet guarantees that a given network identity will always map to the same storage identity.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					appsv1.SchemeGroupVersion.WithResource("statefulsets"),
				),
				{
					Group:       "authentication",
					Version:     "v1beta1",
					Kind:        "SelfSubjectReview",
					Description: `SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					authenticationv1beta1.SchemeGroupVersion.WithResource("selfsubjectreviews"),
				),
				{
					Group:       "authentication",
					Version:     "v1",
					Kind:        "SelfSubjectReview",
					Description: `SelfSubjectReview contains the user information that the kube-apiserver has about the user making this request. When using impersonation, users will receive the user info of the user being impersonated.  If impersonation or request header authentication is used, any extra keys will have their case ignored and returned as lowercase.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					authenticationv1.SchemeGroupVersion.WithResource("selfsubjectreviews"),
				),
				{
					Group:       "authentication",
					Version:     "v1",
					Kind:        "TokenRequest",
					Description: `TokenRequest requests a token for a given service account.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					authenticationv1.SchemeGroupVersion.WithResource("tokenrequests"),
				),
				{
					Group:       "authentication",
					Version:     "v1",
					Kind:        "TokenReview",
					Description: `TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					authenticationv1.SchemeGroupVersion.WithResource("tokenreviews"),
				),
				{
					Group:       "authorization",
					Version:     "v1",
					Kind:        "LocalSubjectAccessReview",
					Description: `LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					authorizationv1.SchemeGroupVersion.WithResource("localsubjectaccessreviews"),
				),
				{
					Group:       "authorization",
					Version:     "v1",
					Kind:        "SelfSubjectAccessReview",
					Description: `SelfSubjectAccessReview checks whether or the current user can perform an action.  Not filling in a spec.namespace means &#34;in all namespaces&#34;.  Self is a special case, because users should always be able to check whether they can perform an action`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					authorizationv1.SchemeGroupVersion.WithResource("selfsubjectaccessreviews"),
				),
				{
					Group:       "authorization",
					Version:     "v1",
					Kind:        "SelfSubjectRulesReview",
					Description: `SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server&#39;s authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. SubjectAccessReview, and LocalAccessReview are the correct way to defer authorization decisions to the API server.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					authorizationv1.SchemeGroupVersion.WithResource("selfsubjectrulesreviews"),
				),
				{
					Group:       "authorization",
					Version:     "v1",
					Kind:        "SubjectAccessReview",
					Description: `SubjectAccessReview checks whether or not a user or group can perform an action.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					authorizationv1.SchemeGroupVersion.WithResource("subjectaccessreviews"),
				),
				{
					Group:       "autoscaling",
					Version:     "v2beta2",
					Kind:        "HorizontalPodAutoscaler",
					Description: `HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					autoscalingv2beta2.SchemeGroupVersion.WithResource("horizontalpodautoscalers"),
				),
				{
					Group:       "autoscaling",
					Version:     "v2",
					Kind:        "HorizontalPodAutoscaler",
					Description: `HorizontalPodAutoscaler is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					autoscalingv2.SchemeGroupVersion.WithResource("horizontalpodautoscalers"),
				),
				{
					Group:       "autoscaling",
					Version:     "v1",
					Kind:        "HorizontalPodAutoscaler",
					Description: `configuration of a horizontal pod autoscaler.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					autoscalingv1.SchemeGroupVersion.WithResource("horizontalpodautoscalers"),
				),
				{
					Group:       "autoscaling",
					Version:     "v1",
					Kind:        "Scale",
					Description: `Scale represents a scaling request for a resource.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					autoscalingv1.SchemeGroupVersion.WithResource("scales"),
				),
				{
					Group:       "batch",
					Version:     "v1",
					Kind:        "CronJob",
					Description: `CronJob represents the configuration of a single cron job.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					batchv1.SchemeGroupVersion.WithResource("cronjobs"),
				),
				{
					Group:       "batch",
					Version:     "v1",
					Kind:        "Job",
					Description: `Job represents the configuration of a single job.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					batchv1.SchemeGroupVersion.WithResource("jobs"),
				),
				{
					Group:   "certificates",
					Version: "v1beta1",
					Kind:    "ClusterTrustBundle",
					Description: `ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).

ClusterTrustBundle objects are considered to be readable by any authenticated user in the cluster, because they can be mounted by pods using the 'clusterTrustBundle' projection.  All service accounts have read access to ClusterTrustBundles by default.  Users who only have namespace-level access to a cluster can read ClusterTrustBundles by impersonating a serviceaccount that they have access to.

It can be optionally associated with a particular assigner, in which case it contains one valid set of trust anchors for that signer. Signers may have multiple associated ClusterTrustBundles; each is an independent set of trust anchors for that signer. Admission control is used to enforce that only users with permissions on the signer can create or modify the corresponding bundle.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					certificatesv1beta1.SchemeGroupVersion.WithResource("clustertrustbundles"),
				),
				{
					Group:   "certificates",
					Version: "v1",
					Kind:    "CertificateSigningRequest",
					Description: `CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued.

Kubelets use this API to obtain:
 1. client certificates to authenticate to kube-apiserver (with the &#34;kubernetes.io/kube-apiserver-client-kubelet&#34; signerName).
 2. serving certificates for TLS endpoints kube-apiserver can connect to securely (with the &#34;kubernetes.io/kubelet-serving&#34; signerName).

This API can be used to request client certificates to authenticate to kube-apiserver (with the &#34;kubernetes.io/kube-apiserver-client&#34; signerName), or to obtain certificates from custom non-Kubernetes signers.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					certificatesv1.SchemeGroupVersion.WithResource("certificatesigningrequests"),
				),
				{
					Group:       "coordination",
					Version:     "v1beta1",
					Kind:        "LeaseCandidate",
					Description: `LeaseCandidate defines a candidate for a Lease object. Candidates are created such that coordinated leader election will pick the best leader from the list of candidates.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					coordinationv1beta1.SchemeGroupVersion.WithResource("leasecandidates"),
				),
				{
					Group:       "coordination",
					Version:     "v1",
					Kind:        "Lease",
					Description: `Lease defines a lease concept.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					coordinationv1.SchemeGroupVersion.WithResource("leases"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "Binding",
					Description: `Binding ties one object to another; for example, a pod is bound to a node by a scheduler.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("bindings"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "ComponentStatus",
					Description: `ComponentStatus (and ComponentStatusList) holds the cluster validation info. Deprecated: This API is deprecated in v1.19+`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("componentstatuses"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "ConfigMap",
					Description: `ConfigMap holds configuration data for pods to consume.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("configmaps"),
				),
				{
					Group:   "core",
					Version: "v1",
					Kind:    "Endpoints",
					Description: `Endpoints is a collection of endpoints that implement the actual service. Example:

	 Name: &#34;mysvc&#34;,
	 Subsets: [
	   {
	     Addresses: [{&#34;ip&#34;: &#34;10.10.1.1&#34;}, {&#34;ip&#34;: &#34;10.10.2.2&#34;}],
	     Ports: [{&#34;name&#34;: &#34;a&#34;, &#34;port&#34;: 8675}, {&#34;name&#34;: &#34;b&#34;, &#34;port&#34;: 309}]
	   },
	   {
	     Addresses: [{&#34;ip&#34;: &#34;10.10.3.3&#34;}],
	     Ports: [{&#34;name&#34;: &#34;a&#34;, &#34;port&#34;: 93}, {&#34;name&#34;: &#34;b&#34;, &#34;port&#34;: 76}]
	   },
	]

Endpoints is a legacy API and does not contain information about all Service features. Use discoveryv1.EndpointSlice for complete information about Service endpoints.

Deprecated: This API is deprecated in v1.33+. Use discoveryv1.EndpointSlice.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("endpoints"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "Event",
					Description: `Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("events"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "LimitRange",
					Description: `LimitRange sets resource usage limits for each kind of resource in a Namespace.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("limitranges"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "Namespace",
					Description: `Namespace provides a scope for Names. Use of multiple namespaces is optional.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("namespaces"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "Node",
					Description: `Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("nodes"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "PersistentVolume",
					Description: `PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("persistentvolumes"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "PersistentVolumeClaim",
					Description: `PersistentVolumeClaim is a user&#39;s request for and claim to a persistent volume`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("persistentvolumeclaims"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "Pod",
					Description: `Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("pods"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "PodTemplate",
					Description: `PodTemplate describes a template for creating copies of a predefined pod.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("podtemplates"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "ReplicationController",
					Description: `ReplicationController represents the configuration of a replication controller.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("replicationcontrollers"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "ResourceQuota",
					Description: `ResourceQuota sets aggregate quota restrictions enforced per namespace`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("resourcequotas"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "Secret",
					Description: `Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("secrets"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "Service",
					Description: `Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("services"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "ServiceAccount",
					Description: `ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("serviceaccounts"),
				),
				{
					Group:       "core",
					Version:     "v1",
					Kind:        "Status",
					Description: `Status is a return value for calls that don&#39;t return other objects.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					corev1.SchemeGroupVersion.WithResource("statuses"),
				),
				{
					Group:       "discovery",
					Version:     "v1",
					Kind:        "EndpointSlice",
					Description: `EndpointSlice represents a set of service endpoints. Most EndpointSlices are created by the EndpointSlice controller to represent the Pods selected by Service objects. For a given service there may be multiple EndpointSlice objects which must be joined to produce the full set of endpoints; you can find all of the slices for a given service by listing EndpointSlices in the service&#39;s namespace whose 'kubernetes.io/service-name' label contains the service&#39;s name.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					discoveryv1.SchemeGroupVersion.WithResource("endpointslices"),
				),
				{
					Group:       "events",
					Version:     "v1",
					Kind:        "Event",
					Description: `Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					eventsv1.SchemeGroupVersion.WithResource("events"),
				),
				{
					Group:       "flowcontrol",
					Version:     "v1beta3",
					Kind:        "FlowSchema",
					Description: `FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a &#34;flow distinguisher&#34;.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					flowcontrolv1beta3.SchemeGroupVersion.WithResource("flowschemas"),
				),
				{
					Group:       "flowcontrol",
					Version:     "v1beta3",
					Kind:        "PriorityLevelConfiguration",
					Description: `PriorityLevelConfiguration represents the configuration of a priority level.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					flowcontrolv1beta3.SchemeGroupVersion.WithResource("prioritylevelconfigurations"),
				),
				{
					Group:       "flowcontrol",
					Version:     "v1beta2",
					Kind:        "FlowSchema",
					Description: `FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a &#34;flow distinguisher&#34;.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					flowcontrolv1beta2.SchemeGroupVersion.WithResource("flowschemas"),
				),
				{
					Group:       "flowcontrol",
					Version:     "v1beta2",
					Kind:        "PriorityLevelConfiguration",
					Description: `PriorityLevelConfiguration represents the configuration of a priority level.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					flowcontrolv1beta2.SchemeGroupVersion.WithResource("prioritylevelconfigurations"),
				),
				{
					Group:       "flowcontrol",
					Version:     "v1beta1",
					Kind:        "FlowSchema",
					Description: `FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a &#34;flow distinguisher&#34;.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					flowcontrolv1beta1.SchemeGroupVersion.WithResource("flowschemas"),
				),
				{
					Group:       "flowcontrol",
					Version:     "v1beta1",
					Kind:        "PriorityLevelConfiguration",
					Description: `PriorityLevelConfiguration represents the configuration of a priority level.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					flowcontrolv1beta1.SchemeGroupVersion.WithResource("prioritylevelconfigurations"),
				),
				{
					Group:       "flowcontrol",
					Version:     "v1",
					Kind:        "FlowSchema",
					Description: `FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a &#34;flow distinguisher&#34;.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					flowcontrolv1.SchemeGroupVersion.WithResource("flowschemas"),
				),
				{
					Group:       "flowcontrol",
					Version:     "v1",
					Kind:        "PriorityLevelConfiguration",
					Description: `PriorityLevelConfiguration represents the configuration of a priority level.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					flowcontrolv1.SchemeGroupVersion.WithResource("prioritylevelconfigurations"),
				),
				{
					Group:       "networking",
					Version:     "v1beta1",
					Kind:        "IPAddress",
					Description: `IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					networkingv1beta1.SchemeGroupVersion.WithResource("ipaddresses"),
				),
				{
					Group:       "networking",
					Version:     "v1beta1",
					Kind:        "ServiceCIDR",
					Description: `ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					networkingv1beta1.SchemeGroupVersion.WithResource("servicecidrs"),
				),
				{
					Group:       "networking",
					Version:     "v1",
					Kind:        "IPAddress",
					Description: `IPAddress represents a single IP of a single IP Family. The object is designed to be used by APIs that operate on IP addresses. The object is used by the Service core API for allocation of IP addresses. An IP address can be represented in different formats, to guarantee the uniqueness of the IP, the name of the object is the IP address in canonical format, four decimal digits separated by dots suppressing leading zeros for IPv4 and the representation defined by RFC 5952 for IPv6. Valid: 192.168.1.5 or 2001:db8::1 or 2001:db8:aaaa:bbbb:cccc:dddd:eeee:1 Invalid: 10.01.2.3 or 2001:db8:0:0:0::1`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					networkingv1.SchemeGroupVersion.WithResource("ipaddresses"),
				),
				{
					Group:       "networking",
					Version:     "v1",
					Kind:        "Ingress",
					Description: `Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					networkingv1.SchemeGroupVersion.WithResource("ingresses"),
				),
				{
					Group:       "networking",
					Version:     "v1",
					Kind:        "IngressClass",
					Description: `IngressClass represents the class of the Ingress, referenced by the Ingress Spec. The 'ingressclass.kubernetes.io/is-default-class' annotation can be used to indicate that an IngressClass should be considered default. When a single IngressClass resource has this annotation set to true, new Ingress resources without a class specified will be assigned this default class.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					networkingv1.SchemeGroupVersion.WithResource("ingressclasses"),
				),
				{
					Group:       "networking",
					Version:     "v1",
					Kind:        "NetworkPolicy",
					Description: `NetworkPolicy describes what network traffic is allowed for a set of Pods`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					networkingv1.SchemeGroupVersion.WithResource("networkpolicies"),
				),
				{
					Group:       "networking",
					Version:     "v1",
					Kind:        "ServiceCIDR",
					Description: `ServiceCIDR defines a range of IP addresses using CIDR format (e.g. 192.168.0.0/24 or 2001:db2::/64). This range is used to allocate ClusterIPs to Service objects.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					networkingv1.SchemeGroupVersion.WithResource("servicecidrs"),
				),
				{
					Group:       "node",
					Version:     "v1",
					Kind:        "RuntimeClass",
					Description: `RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the PodSpec. The Kubelet is responsible for resolving the RuntimeClassName reference before running the pod.  For more details, see https://kubernetes.io/docs/concepts/containers/runtime-class/`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					nodev1.SchemeGroupVersion.WithResource("runtimeclasses"),
				),
				{
					Group:       "policy",
					Version:     "v1",
					Kind:        "Eviction",
					Description: `Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.  A request to cause such an eviction is created by POSTing to .../pods/&lt;pod name&gt;/evictions.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					policyv1.SchemeGroupVersion.WithResource("evictions"),
				),
				{
					Group:       "policy",
					Version:     "v1",
					Kind:        "PodDisruptionBudget",
					Description: `PodDisruptionBudget is an object to define the max disruption that can be caused to a collection of pods`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					policyv1.SchemeGroupVersion.WithResource("poddisruptionbudgets"),
				),
				{
					Group:       "rbac",
					Version:     "v1",
					Kind:        "ClusterRole",
					Description: `ClusterRole is a cluster level, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					rbacv1.SchemeGroupVersion.WithResource("clusterroles"),
				),
				{
					Group:       "rbac",
					Version:     "v1",
					Kind:        "ClusterRoleBinding",
					Description: `ClusterRoleBinding references a ClusterRole, but not contain it.  It can reference a ClusterRole in the global namespace, and adds who information via Subject.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					rbacv1.SchemeGroupVersion.WithResource("clusterrolebindings"),
				),
				{
					Group:       "rbac",
					Version:     "v1",
					Kind:        "Role",
					Description: `Role is a namespaced, logical grouping of PolicyRules that can be referenced as a unit by a RoleBinding.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					rbacv1.SchemeGroupVersion.WithResource("roles"),
				),
				{
					Group:       "rbac",
					Version:     "v1",
					Kind:        "RoleBinding",
					Description: `RoleBinding references a role, but does not contain it.  It can reference a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via Subjects and namespace information by which namespace it exists in.  RoleBindings in a given namespace only have effect in that namespace.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					rbacv1.SchemeGroupVersion.WithResource("rolebindings"),
				),
				{
					Group:   "resource",
					Version: "v1beta2",
					Kind:    "DeviceClass",
					Description: `DeviceClass is a vendor- or admin-provided resource that contains device configuration and selectors. It can be referenced in the device requests of a claim to apply these presets. Cluster scoped.

This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					resourcev1beta2.SchemeGroupVersion.WithResource("deviceclasses"),
				),
				{
					Group:   "resource",
					Version: "v1beta2",
					Kind:    "ResourceClaim",
					Description: `ResourceClaim describes a request for access to resources in the cluster, for use by workloads. For example, if a workload needs an accelerator device with specific properties, this is how that request is expressed. The status stanza tracks whether this claim has been satisfied and what specific resources have been allocated.

This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					resourcev1beta2.SchemeGroupVersion.WithResource("resourceclaims"),
				),
				{
					Group:   "resource",
					Version: "v1beta2",
					Kind:    "ResourceClaimTemplate",
					Description: `ResourceClaimTemplate is used to produce ResourceClaim objects.

This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					resourcev1beta2.SchemeGroupVersion.WithResource("resourceclaimtemplates"),
				),
				{
					Group:   "resource",
					Version: "v1beta2",
					Kind:    "ResourceSlice",
					Description: `ResourceSlice represents one or more resources in a pool of similar resources, managed by a common driver. A pool may span more than one ResourceSlice, and exactly how many ResourceSlices comprise a pool is determined by the driver.

At the moment, the only supported resources are devices with attributes and capacities. Each device in a given pool, regardless of how many ResourceSlices, must have a unique name. The ResourceSlice in which a device gets published may change over time. The unique identifier for a device is the tuple &lt;driver name&gt;, &lt;pool name&gt;, &lt;device name&gt;.

Whenever a driver needs to update a pool, it increments the pool.Spec.Pool.Generation number and updates all ResourceSlices with that new number and new resource definitions. A consumer must only use ResourceSlices with the highest generation number and ignore all others.

When allocating all resources in a pool matching certain criteria or when looking for the best solution among several different alternatives, a consumer should check the number of ResourceSlices in a pool (included in each ResourceSlice) to determine whether its view of a pool is complete and if not, should wait until the driver has completed updating the pool.

For resources that are not local to a node, the node name is not set. Instead, the driver may use a node selector to specify where the devices are available.

This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					resourcev1beta2.SchemeGroupVersion.WithResource("resourceslices"),
				),
				{
					Group:   "resource",
					Version: "v1beta1",
					Kind:    "DeviceClass",
					Description: `DeviceClass is a vendor- or admin-provided resource that contains device configuration and selectors. It can be referenced in the device requests of a claim to apply these presets. Cluster scoped.

This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					resourcev1beta1.SchemeGroupVersion.WithResource("deviceclasses"),
				),
				{
					Group:   "resource",
					Version: "v1beta1",
					Kind:    "ResourceClaim",
					Description: `ResourceClaim describes a request for access to resources in the cluster, for use by workloads. For example, if a workload needs an accelerator device with specific properties, this is how that request is expressed. The status stanza tracks whether this claim has been satisfied and what specific resources have been allocated.

This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					resourcev1beta1.SchemeGroupVersion.WithResource("resourceclaims"),
				),
				{
					Group:   "resource",
					Version: "v1beta1",
					Kind:    "ResourceClaimTemplate",
					Description: `ResourceClaimTemplate is used to produce ResourceClaim objects.

This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					resourcev1beta1.SchemeGroupVersion.WithResource("resourceclaimtemplates"),
				),
				{
					Group:   "resource",
					Version: "v1beta1",
					Kind:    "ResourceSlice",
					Description: `ResourceSlice represents one or more resources in a pool of similar resources, managed by a common driver. A pool may span more than one ResourceSlice, and exactly how many ResourceSlices comprise a pool is determined by the driver.

At the moment, the only supported resources are devices with attributes and capacities. Each device in a given pool, regardless of how many ResourceSlices, must have a unique name. The ResourceSlice in which a device gets published may change over time. The unique identifier for a device is the tuple &lt;driver name&gt;, &lt;pool name&gt;, &lt;device name&gt;.

Whenever a driver needs to update a pool, it increments the pool.Spec.Pool.Generation number and updates all ResourceSlices with that new number and new resource definitions. A consumer must only use ResourceSlices with the highest generation number and ignore all others.

When allocating all resources in a pool matching certain criteria or when looking for the best solution among several different alternatives, a consumer should check the number of ResourceSlices in a pool (included in each ResourceSlice) to determine whether its view of a pool is complete and if not, should wait until the driver has completed updating the pool.

For resources that are not local to a node, the node name is not set. Instead, the driver may use a node selector to specify where the devices are available.

This is an alpha type and requires enabling the DynamicResourceAllocation feature gate.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					resourcev1beta1.SchemeGroupVersion.WithResource("resourceslices"),
				),
				{
					Group:       "scheduling",
					Version:     "v1",
					Kind:        "PriorityClass",
					Description: `PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					schedulingv1.SchemeGroupVersion.WithResource("priorityclasses"),
				),
				{
					Group:   "storage",
					Version: "v1beta1",
					Kind:    "CSIStorageCapacity",
					Description: `CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.

For example this can express things like: - StorageClass &#34;standard&#34; has &#34;1234 GiB&#34; available in &#34;topology.kubernetes.io/zone=us-east1&#34; - StorageClass &#34;localssd&#34; has &#34;10 GiB&#34; available in &#34;kubernetes.io/hostname=knode-abc123&#34;

The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero

The producer of these objects can decide which approach is more suitable.

They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					storagev1beta1.SchemeGroupVersion.WithResource("csistoragecapacities"),
				),
				{
					Group:       "storage",
					Version:     "v1beta1",
					Kind:        "VolumeAttributesClass",
					Description: `VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver. The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the PersistentVolumeClaim spec after provisioning.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					storagev1beta1.SchemeGroupVersion.WithResource("volumeattributesclasses"),
				),
				{
					Group:       "storage",
					Version:     "v1",
					Kind:        "CSIDriver",
					Description: `CSIDriver captures information about a Container Storage Interface (CSI) volume driver deployed on the cluster. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether pod information needs to be passed on mount. CSIDriver objects are non-namespaced.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					storagev1.SchemeGroupVersion.WithResource("csidrivers"),
				),
				{
					Group:       "storage",
					Version:     "v1",
					Kind:        "CSINode",
					Description: `CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the Kubelet version is low enough that it doesn&#39;t create this object. CSINode has an OwnerReference that points to the corresponding node object.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					storagev1.SchemeGroupVersion.WithResource("csinodes"),
				),
				{
					Group:   "storage",
					Version: "v1",
					Kind:    "CSIStorageCapacity",
					Description: `CSIStorageCapacity stores the result of one CSI GetCapacity call. For a given StorageClass, this describes the available capacity in a particular topology segment.  This can be used when considering where to instantiate new PersistentVolumes.

For example this can express things like: - StorageClass &#34;standard&#34; has &#34;1234 GiB&#34; available in &#34;topology.kubernetes.io/zone=us-east1&#34; - StorageClass &#34;localssd&#34; has &#34;10 GiB&#34; available in &#34;kubernetes.io/hostname=knode-abc123&#34;

The following three cases all imply that no capacity is available for a certain combination: - no object exists with suitable topology and storage class name - such an object exists, but the capacity is unset - such an object exists, but the capacity is zero

The producer of these objects can decide which approach is more suitable.

They are consumed by the kube-scheduler when a CSI driver opts into capacity-aware scheduling with CSIDriverSpec.StorageCapacity. The scheduler compares the MaximumVolumeSize against the requested size of pending volumes to filter out unsuitable nodes. If MaximumVolumeSize is unset, it falls back to a comparison against the less precise Capacity. If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					storagev1.SchemeGroupVersion.WithResource("csistoragecapacities"),
				),
				{
					Group:   "storage",
					Version: "v1",
					Kind:    "StorageClass",
					Description: `StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.

StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					storagev1.SchemeGroupVersion.WithResource("storageclasses"),
				),
				{
					Group:   "storage",
					Version: "v1",
					Kind:    "VolumeAttachment",
					Description: `VolumeAttachment captures the intent to attach or detach the specified volume to/from the specified node.

VolumeAttachment objects are non-namespaced.`,
				}: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
					storagev1.SchemeGroupVersion.WithResource("volumeattachments"),
				),
			},
		},
	)
}
