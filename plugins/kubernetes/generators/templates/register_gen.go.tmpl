// AUTOGENERATED FILE: Do not edit.
package resource

import (
	"github.com/omniview/kubernetes/pkg/plugin/resource/clients"
	"github.com/omniview/kubernetes/pkg/plugin/resource/resourcers"
	"github.com/omniviewdev/plugin-sdk/pkg/resource/types"
	"github.com/omniviewdev/plugin-sdk/pkg/sdk"
	"go.uber.org/zap"

	"k8s.io/client-go/dynamic/dynamicinformer"
  "k8s.io/apimachinery/pkg/runtime/schema"
  {{- range .Packages }}
  {{- if eq .ImportName "apiextensionsv1" }}
  {{.ImportName}} "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
  {{- else if eq .ImportName "apiregistrationv1"}}
  {{.ImportName}} "k8s.io/kube-aggregator/pkg/apis/apiregistration/v1"
  {{- else }}
	{{.ImportName}} "k8s.io/api/{{.ImportPath}}"
  {{- end }}
  {{- end }}
)

// map of the resource strings to their schema.GroupVersionResource
//
//nolint:lll,gochecknoglobals // autogenerated code that's required for each resource
var resourceMap = map[string]schema.GroupVersionResource{
{{- range .Resources}}
  "{{.Group}}::{{.Version}}::{{.Kind}}": {{.ImportName}}.SchemeGroupVersion.WithResource("{{.SGVRName}}"),
{{- end }}
}

//nolint:lll,gochecknoglobals // autogenerated code that's required for each resource
var gvrMap = map[schema.GroupVersionResource]string{
{{- range .Resources}}
  {{.ImportName}}.SchemeGroupVersion.WithResource("{{.SGVRName}}"): "{{.Group}}::{{.Version}}::{{.Kind}}",
{{- end }}
}

// Register registers the resource plugin with the plugin server.
//
//nolint:funlen // autogenerated code that's required for each resource
func Register(plugin *sdk.Plugin) {
	logger := zap.S()

	sdk.RegisterResourcePlugin(
		plugin,
		sdk.ResourcePluginOpts[clients.ClientSet, clients.DiscoveryClient, dynamicinformer.DynamicSharedInformerFactory]{
			ClientFactory:                clients.NewKubernetesClientFactory(),
			DiscoveryClientFactory:       clients.NewKubernetesDiscoverClientFactory(),
			DiscoveryFunc:                DiscoveryFunc,
			LoadConnectionFunc:           LoadConnectionsFunc,
			LoadConnectionNamespacesFunc: LoadConnectionNamespacesFunc,
			CheckConnectionFunc:          CheckConnectionFunc,
			InformerOpts:                 NewInformerOptions(),
			ResourceGroups:               ResourceGroups,
			ResourceDefinitions:          resourcers.ResourceDefs,
			DefaultResourceDefinition:    resourcers.DefaultResourceDef,
			DynamicResourcers: map[string]types.DynamicResourcer[clients.ClientSet]{
				"*": resourcers.NewKubernetesDynamicResourcer(logger),
			},
			Resourcers:                   map[types.ResourceMeta]types.Resourcer[clients.ClientSet]{
        {{- range .Resources}}
				{
          Group:   "{{.Group}}", 
          Version: "{{.Version}}", 
          Kind:    "{{.Kind}}",
          Description: `{{.Description}}`,
        }: resourcers.NewKubernetesResourcerBase[resourcers.MetaAccessor](
					logger,
          {{.ImportName}}.SchemeGroupVersion.WithResource("{{.SGVRName}}"),
				),
        {{- end }}
			},
		},
	)
}
