
import Chip from '@mui/joy/Chip';
import LinearProgress from '@mui/joy/LinearProgress';
import Link from '@mui/joy/Link';
import List from '@mui/joy/List';
import ListDivider from '@mui/joy/ListDivider';
import ListItem from '@mui/joy/ListItem';
import ListItemContent from '@mui/joy/ListItemContent';
import Sheet from '@mui/joy/Sheet';
import Stack from '@mui/joy/Stack';
import Typography from '@mui/joy/Typography';

import { getSeverityColor } from './utils';
import { type TrivyVulnerability } from '../../types';
import { BrowserOpenURL } from '@omniviewdev/runtime/runtime';

export const VulnerabilityInfoList: React.FC<{ item: TrivyVulnerability }> = ({ item }) => {
  const displays: Array<{ label: string; value: string | React.ReactNode; isLink?: boolean }> = [
    {
      label: 'CVSS Score', value: (
        <Stack
          display={'flex'}
          direction='row'
          justifyContent='flex-end'
          alignItems='center'
          textAlign='center'
          gap={1}
          sx={{
            minWidth: 300,
          }}
        >
          {item?.CVSS?.nvd?.V3Score && <LinearProgress
            determinate
            size='lg'
            variant='solid'
            value={item?.CVSS?.nvd?.V3Score * 10}
            sx={{ maxWidth: 300 }}
            color={getSeverityColor(item.Severity)}
          />}
          <Chip
            sx={{
              mr: -1,
              borderRadius: 'sm',
            }}
            color={getSeverityColor(item.Severity)}
            variant='plain'
          >
            {item?.CVSS?.nvd?.V3Score ?? 'N/A'}
          </Chip>
        </Stack>
      )
    },
    { label: 'Package', value: item.PkgName },
    { label: 'Status', value: item.Status },
    { label: 'Installed Version', value: item.InstalledVersion },
    { label: 'Fixed Version', value: item.FixedVersion },
    { label: 'More Info', value: item.PrimaryURL, isLink: true },
  ];

  return (

    <Sheet variant="outlined" sx={{ borderRadius: 'sm' }}>
      <List
        size='sm'
      >
        {displays.map((display, index) => (
          <>
            <ListItem key={index}>
              <ListItemContent
                sx={{
                  px: 0.5,
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center',
                }}
              >
                <Typography level="body-sm" component="div">
                  {display.label}
                </Typography>
                {typeof display.value === 'string' ? (
                  <Typography level="body-sm" fontWeight={600} component="div">
                    {display.isLink ? (
                      <Link
                        underline='none'
                        color='primary'
                        component='button'
                        fontWeight='lg'
                        onClick={() => {
                          BrowserOpenURL(display.value as string);
                        }}
                      >
                        {display.value}
                      </Link>
                    ) : (
                      display.value
                    )}
                  </Typography>
                ) : display.value}
              </ListItemContent>
            </ListItem>
            {index < displays.length - 1 && <ListDivider />}
          </>
        ))}
      </List>
    </Sheet>
  );
};
