name: Build and Release (MacOS)

on:
  push:
    branches:
      - "macos-build-test"

env:
  # Necessary for most environments as build failure can occur due to OOM issues
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  build:
    strategy:
      # Failure in one platform build won't impact the others
      fail-fast: false
      matrix:
        build:
          - name: "macos"
            platform: "darwin/universal"
            os: "macos-latest"

    runs-on: ${{ matrix.build.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      ###########################################################################
      # Prepare release information
      ###########################################################################
      - name: Normalize version tag
        id: normalise_version
        shell: bash
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            version=$(echo "${{ github.ref_name }}" | sed -e 's/^v//' | sed -e 's/-//')
          else
            version="0.0.1"
          fi
          echo "version=${version}" >> "$GITHUB_OUTPUT"

      - name: Normalise platform tag
        id: normalise_platform
        shell: bash
        run: |
          tag=$(echo ${{ matrix.build.platform }} | sed -e 's/\//_/g')
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      ###########################################################################
      # Setup Dependencies
      ###########################################################################
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Setup Pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: |
            - args: []
            - args: [--global, typescript]

      - name: Setup GoLang
        uses: actions/setup-go@v5
        with:
          check-latest: true
          cache: true
          cache-dependency-path: "go.sum"
          go-version: "1.24"

      - run: go version
        shell: bash

      # install wails
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
        shell: bash

      - name: Install macOS Wails deps
        run: brew install mitchellh/gon/gon
        shell: bash

      - name: Install Garble
        run: go install mvdan.cc/garble@latest
        shell: bash

      ###########################################################################
      # Build Runtime
      ###########################################################################
      - name: Build runtime
        shell: bash
        run: pnpm run build
        working-directory: packages/omniviewdev-runtime

      ###########################################################################
      # Build Application
      ###########################################################################
      - name: Build Omniview
        shell: bash
        run: |
          wails build -platform ${{ matrix.build.platform }} \
            -webview2 download \
            -ldflags "-X main.Version=${{ steps.normalise_version.outputs.version }}"

      ###########################################################################
      # Sign and Package
      ###########################################################################
      - name: Codesign and Notarization
        uses: lando/code-sign-action@v3
        with:
          file: ./build/bin/Omniview
          certificate-data: ${{ secrets.CLI_MACOS_CERTIFICATE }}
          certificate-id: ${{ secrets.CLI_MACOS_TEAM_ID }}
          certificate-password: ${{ secrets.CLI_MACOS_CERTIFICATE_PWD }}
          apple-notary-user: ${{ secrets.CLI_MACOS_NOTARY_USER }}
          apple-notary-password: ${{ secrets.CLI_MACOS_NOTARY_PWD }}
          apple-product-id: com.omniview.omniview
          options: --options runtime --entitlements ./build/darwin/entitlements.xml

      - name: Checkout create-image
        uses: actions/checkout@v2
        with:
          repository: create-dmg/create-dmg
          path: ./build/create-dmg
          ref: master

      - name: Create DMG
        shell: bash
        working-directory: ./build
        run: |
          ./create-dmg/create-dmg \
            --no-internet-enable \
            --volname "Omniview" \
            --volicon "bin/Omniview.app/Contents/Resources/iconfile.icns" \
            --text-size 12 \
            --window-pos 400 400 \
            --window-size 660 450 \
            --icon-size 80 \
            --icon "Omniview.app" 180 180 \
            --hide-extension "Omniview.app" \
            --app-drop-link 480 180 \
            "bin/Omniview-${{ steps.normalise_platform.outputs.tag }}.dmg" \
            "bin"

      - name: Rename dmg
        working-directory: ./build/bin
        run: mv "Omniview-${{ steps.normalise_platform.outputs.tag }}.dmg" "Omniview_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.dmg"

      ###########################################################################
      # Sign and Package
      ###########################################################################
      - name: Release
        uses: softprops/action-gh-release@v1
        if: github.ref_type == 'tag'
        with:
          files: |
            ./build/bin/Omniview_${{ steps.normalise_version.outputs.version }}_${{ steps.normalise_platform.outputs.tag }}.dmg
          token: ${{ secrets.GITHUB_TOKEN }}
