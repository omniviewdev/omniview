name: Build Core Plugins

on:
  push:
    tags:
      - "*"

env:
  # Necessary for most environments as build failure can occur due to OOM issues
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  build:
    strategy:
      # Failure in one platform build won't impact the others
      fail-fast: false
      matrix:
        plugin: ["kubernetes"]
        build:
          # Linux builds
          - os: linux
            arch: amd64
            runner: "ubuntu-latest"
          - os: linux
            arch: arm64
            runner: "ubuntu-latest"

          # Windows Builds (we can do on ubuntu)
          - os: "windows"
            arch: "amd64"
            runner: "ubuntu-latest"

          # Mac Builds
          - os: darwin
            arch: amd64
            runner: "macos-latest"
          - os: darwin
            arch: arm64
            runner: "macos-latest"

    runs-on: ${{ matrix.build.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: |
            - args: []
            - args: [--global, typescript]

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "^1.24.2"

      - name: Build runtime
        working-directory: packages/omniviewdev-runtime
        run: pnpm run build

      - name: Prepare directory
        working-directory: plugins/${{ matrix.plugin }}
        run: |
          # Clean
          rm -rf ./build
          mkdir -p ./build
          # Copy metadata (shared)
          cp plugin.yaml ./build/

      # Compile the ui
      - name: Compile UI
        working-directory: plugins/${{ matrix.plugin }}
        run: |
          mkdir -p ./build/assets;
          cd ./ui && pnpm run build && cd ..;
          cp -r ui/dist/assets/* ./build/assets/;

      # Compile the binary
      - name: Compile Binary
        working-directory: plugins/${{ matrix.plugin }}
        env:
          OUTFILE: plugin
        run: |
          mkdir -p ./build/bin;
          if [ "$${{matrix.build.os}}" = "windows" ]; then OUTFILE=plugin.exe; fi;
          env GOOS=${{matrix.build.os}} GOARCH=${{matrix.build.arch}} go build -o ./build/bin/$OUTFILE ./pkg;

      # Package up the plugin
      - name: Package
        working-directory: plugins/${{ matrix.plugin }}
        run: |
          tar -czvf ./plugin-${{ matrix.plugin }}-${{ github.ref_name }}-${{ matrix.build.os }}-${{ matrix.build.arch }}.tar.gz -C ./build .

      - name: Release
        uses: softprops/action-gh-release@v1
        if: github.ref_type == 'tag'
        with:
          name: plugin-${{ matrix.plugin }}-${{ github.ref_name }}
          files: ./plugins/${{ matrix.plugin }}/plugin-${{ matrix.plugin }}-${{ github.ref_name }}-${{ matrix.build.os }}-${{ matrix.build.arch }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
