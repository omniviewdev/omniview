syntax = "proto3";
package com.omniview.pluginsdk;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

option go_package = "./proto";

//-----------------------------------------------------------------
// Common
//-----------------------------------------------------------------

message PluginContext {
  // source plugin calling the API.
  string plugin_id = 1;
  // settings for the plugin
  map<string, string> plugin_settings = 2;
  // global IDE settings
  map<string, string> global_settings = 3;
}

//-----------------------------------------------------------------
// Command
//-----------------------------------------------------------------

service Command {
  rpc Call(CallCommandRequest) returns (CallCommandResponse);
}

message StringList {
  repeated string values = 1;
}

message CallCommandRequest {
  PluginContext plugin_context = 1;
  string path = 2;
  string method = 3;
  string url = 4;
  map<string,StringList> headers = 5;
  bytes body = 6;
}

message CallCommandResponse {
  int32 code = 1;
  map<string,StringList> headers = 2;
  bytes body = 3;
}

//-----------------------------------------------------------------
// Stream
//-----------------------------------------------------------------

service Stream {
  rpc Subscribe(SubscribeStreamRequest) returns (SubscribeStreamResponse);
  rpc Run(RunStreamRequest) returns (stream StreamPacket);
  rpc Publish(PublishStreamRequest) returns (PublishStreamResponse);
}

message SubscribeStreamRequest {
  PluginContext plugin_context = 1;

  // path part of channel.
  string path = 2;
}

message SubscribeStreamResponse {
  enum Status {
    OK = 0;
    NOT_FOUND = 1;
    PERMISSION_DENIED = 2;
  }
  // status of subscribe response.
  Status status = 1;

  // JSON-encoded data to return to a client in a successful
  // subscription result.
  bytes data = 2;
}

message PublishStreamRequest {
  PluginContext plugin_context = 1;

  // path part of a channel.
  string path = 2;
  // data that user wants to publish into a stream
  // (only JSON-encoded at the moment).
  bytes data = 3;
}

message PublishStreamResponse {
  enum Status {
    OK = 0;
    NOT_FOUND = 1;
    PERMISSION_DENIED = 2;
  }
  Status status = 1;
  bytes data = 2;
}

message RunStreamRequest {
  PluginContext plugin_context = 1;
  string path = 2;
}

message StreamPacket {
  // JSON-encoded data to publish into a channel.
  bytes data = 1;
}
