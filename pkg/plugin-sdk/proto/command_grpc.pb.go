// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/command.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Command_Call_FullMethodName = "/com.omniview.pluginsdk.Command/Call"
)

// CommandClient is the client API for Command service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandClient interface {
	Call(ctx context.Context, in *CallCommandRequest, opts ...grpc.CallOption) (*CallCommandResponse, error)
}

type commandClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandClient(cc grpc.ClientConnInterface) CommandClient {
	return &commandClient{cc}
}

func (c *commandClient) Call(ctx context.Context, in *CallCommandRequest, opts ...grpc.CallOption) (*CallCommandResponse, error) {
	out := new(CallCommandResponse)
	err := c.cc.Invoke(ctx, Command_Call_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServer is the server API for Command service.
// All implementations should embed UnimplementedCommandServer
// for forward compatibility
type CommandServer interface {
	Call(context.Context, *CallCommandRequest) (*CallCommandResponse, error)
}

// UnimplementedCommandServer should be embedded to have forward compatible implementations.
type UnimplementedCommandServer struct {
}

func (UnimplementedCommandServer) Call(context.Context, *CallCommandRequest) (*CallCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}

// UnsafeCommandServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServer will
// result in compilation errors.
type UnsafeCommandServer interface {
	mustEmbedUnimplementedCommandServer()
}

func RegisterCommandServer(s grpc.ServiceRegistrar, srv CommandServer) {
	s.RegisterService(&Command_ServiceDesc, srv)
}

func _Command_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Command_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServer).Call(ctx, req.(*CallCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Command_ServiceDesc is the grpc.ServiceDesc for Command service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Command_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.omniview.pluginsdk.Command",
	HandlerType: (*CommandServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _Command_Call_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/command.proto",
}

const (
	Stream_Subscribe_FullMethodName = "/com.omniview.pluginsdk.Stream/Subscribe"
	Stream_Run_FullMethodName       = "/com.omniview.pluginsdk.Stream/Run"
	Stream_Publish_FullMethodName   = "/com.omniview.pluginsdk.Stream/Publish"
)

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamClient interface {
	Subscribe(ctx context.Context, in *SubscribeStreamRequest, opts ...grpc.CallOption) (*SubscribeStreamResponse, error)
	Run(ctx context.Context, in *RunStreamRequest, opts ...grpc.CallOption) (Stream_RunClient, error)
	Publish(ctx context.Context, in *PublishStreamRequest, opts ...grpc.CallOption) (*PublishStreamResponse, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Subscribe(ctx context.Context, in *SubscribeStreamRequest, opts ...grpc.CallOption) (*SubscribeStreamResponse, error) {
	out := new(SubscribeStreamResponse)
	err := c.cc.Invoke(ctx, Stream_Subscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamClient) Run(ctx context.Context, in *RunStreamRequest, opts ...grpc.CallOption) (Stream_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stream_ServiceDesc.Streams[0], Stream_Run_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &streamRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stream_RunClient interface {
	Recv() (*StreamPacket, error)
	grpc.ClientStream
}

type streamRunClient struct {
	grpc.ClientStream
}

func (x *streamRunClient) Recv() (*StreamPacket, error) {
	m := new(StreamPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) Publish(ctx context.Context, in *PublishStreamRequest, opts ...grpc.CallOption) (*PublishStreamResponse, error) {
	out := new(PublishStreamResponse)
	err := c.cc.Invoke(ctx, Stream_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServer is the server API for Stream service.
// All implementations should embed UnimplementedStreamServer
// for forward compatibility
type StreamServer interface {
	Subscribe(context.Context, *SubscribeStreamRequest) (*SubscribeStreamResponse, error)
	Run(*RunStreamRequest, Stream_RunServer) error
	Publish(context.Context, *PublishStreamRequest) (*PublishStreamResponse, error)
}

// UnimplementedStreamServer should be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (UnimplementedStreamServer) Subscribe(context.Context, *SubscribeStreamRequest) (*SubscribeStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamServer) Run(*RunStreamRequest, Stream_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedStreamServer) Publish(context.Context, *PublishStreamRequest) (*PublishStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

// UnsafeStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServer will
// result in compilation errors.
type UnsafeStreamServer interface {
	mustEmbedUnimplementedStreamServer()
}

func RegisterStreamServer(s grpc.ServiceRegistrar, srv StreamServer) {
	s.RegisterService(&Stream_ServiceDesc, srv)
}

func _Stream_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stream_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Subscribe(ctx, req.(*SubscribeStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stream_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).Run(m, &streamRunServer{stream})
}

type Stream_RunServer interface {
	Send(*StreamPacket) error
	grpc.ServerStream
}

type streamRunServer struct {
	grpc.ServerStream
}

func (x *streamRunServer) Send(m *StreamPacket) error {
	return x.ServerStream.SendMsg(m)
}

func _Stream_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Stream_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServer).Publish(ctx, req.(*PublishStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stream_ServiceDesc is the grpc.ServiceDesc for Stream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.omniview.pluginsdk.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Stream_Subscribe_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _Stream_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Stream_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/command.proto",
}
