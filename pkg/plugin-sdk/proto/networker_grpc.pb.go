// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/networker.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkerPlugin_GetSupportedPortForwardTargets_FullMethodName = "/com.omniview.pluginsdk.NetworkerPlugin/GetSupportedPortForwardTargets"
	NetworkerPlugin_GetPortForwardSession_FullMethodName          = "/com.omniview.pluginsdk.NetworkerPlugin/GetPortForwardSession"
	NetworkerPlugin_ListPortForwardSessions_FullMethodName        = "/com.omniview.pluginsdk.NetworkerPlugin/ListPortForwardSessions"
	NetworkerPlugin_FindPortForwardSessions_FullMethodName        = "/com.omniview.pluginsdk.NetworkerPlugin/FindPortForwardSessions"
	NetworkerPlugin_StartPortForwardSession_FullMethodName        = "/com.omniview.pluginsdk.NetworkerPlugin/StartPortForwardSession"
	NetworkerPlugin_ClosePortForwardSession_FullMethodName        = "/com.omniview.pluginsdk.NetworkerPlugin/ClosePortForwardSession"
)

// NetworkerPluginClient is the client API for NetworkerPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkerPluginClient interface {
	// Resource Forwarding Management
	GetSupportedPortForwardTargets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSupportedPortForwardTargetsResponse, error)
	GetPortForwardSession(ctx context.Context, in *PortForwardSessionByIdRequest, opts ...grpc.CallOption) (*PortForwardSessionByIdResponse, error)
	ListPortForwardSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PortForwardSessionListResponse, error)
	FindPortForwardSessions(ctx context.Context, in *FindPortForwardSessionRequest, opts ...grpc.CallOption) (*PortForwardSessionListResponse, error)
	StartPortForwardSession(ctx context.Context, in *PortForwardSessionOptions, opts ...grpc.CallOption) (*PortForwardSessionByIdResponse, error)
	ClosePortForwardSession(ctx context.Context, in *PortForwardSessionByIdRequest, opts ...grpc.CallOption) (*PortForwardSessionByIdResponse, error)
}

type networkerPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkerPluginClient(cc grpc.ClientConnInterface) NetworkerPluginClient {
	return &networkerPluginClient{cc}
}

func (c *networkerPluginClient) GetSupportedPortForwardTargets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSupportedPortForwardTargetsResponse, error) {
	out := new(GetSupportedPortForwardTargetsResponse)
	err := c.cc.Invoke(ctx, NetworkerPlugin_GetSupportedPortForwardTargets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerPluginClient) GetPortForwardSession(ctx context.Context, in *PortForwardSessionByIdRequest, opts ...grpc.CallOption) (*PortForwardSessionByIdResponse, error) {
	out := new(PortForwardSessionByIdResponse)
	err := c.cc.Invoke(ctx, NetworkerPlugin_GetPortForwardSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerPluginClient) ListPortForwardSessions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PortForwardSessionListResponse, error) {
	out := new(PortForwardSessionListResponse)
	err := c.cc.Invoke(ctx, NetworkerPlugin_ListPortForwardSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerPluginClient) FindPortForwardSessions(ctx context.Context, in *FindPortForwardSessionRequest, opts ...grpc.CallOption) (*PortForwardSessionListResponse, error) {
	out := new(PortForwardSessionListResponse)
	err := c.cc.Invoke(ctx, NetworkerPlugin_FindPortForwardSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerPluginClient) StartPortForwardSession(ctx context.Context, in *PortForwardSessionOptions, opts ...grpc.CallOption) (*PortForwardSessionByIdResponse, error) {
	out := new(PortForwardSessionByIdResponse)
	err := c.cc.Invoke(ctx, NetworkerPlugin_StartPortForwardSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkerPluginClient) ClosePortForwardSession(ctx context.Context, in *PortForwardSessionByIdRequest, opts ...grpc.CallOption) (*PortForwardSessionByIdResponse, error) {
	out := new(PortForwardSessionByIdResponse)
	err := c.cc.Invoke(ctx, NetworkerPlugin_ClosePortForwardSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkerPluginServer is the server API for NetworkerPlugin service.
// All implementations should embed UnimplementedNetworkerPluginServer
// for forward compatibility
type NetworkerPluginServer interface {
	// Resource Forwarding Management
	GetSupportedPortForwardTargets(context.Context, *emptypb.Empty) (*GetSupportedPortForwardTargetsResponse, error)
	GetPortForwardSession(context.Context, *PortForwardSessionByIdRequest) (*PortForwardSessionByIdResponse, error)
	ListPortForwardSessions(context.Context, *emptypb.Empty) (*PortForwardSessionListResponse, error)
	FindPortForwardSessions(context.Context, *FindPortForwardSessionRequest) (*PortForwardSessionListResponse, error)
	StartPortForwardSession(context.Context, *PortForwardSessionOptions) (*PortForwardSessionByIdResponse, error)
	ClosePortForwardSession(context.Context, *PortForwardSessionByIdRequest) (*PortForwardSessionByIdResponse, error)
}

// UnimplementedNetworkerPluginServer should be embedded to have forward compatible implementations.
type UnimplementedNetworkerPluginServer struct {
}

func (UnimplementedNetworkerPluginServer) GetSupportedPortForwardTargets(context.Context, *emptypb.Empty) (*GetSupportedPortForwardTargetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportedPortForwardTargets not implemented")
}
func (UnimplementedNetworkerPluginServer) GetPortForwardSession(context.Context, *PortForwardSessionByIdRequest) (*PortForwardSessionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortForwardSession not implemented")
}
func (UnimplementedNetworkerPluginServer) ListPortForwardSessions(context.Context, *emptypb.Empty) (*PortForwardSessionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPortForwardSessions not implemented")
}
func (UnimplementedNetworkerPluginServer) FindPortForwardSessions(context.Context, *FindPortForwardSessionRequest) (*PortForwardSessionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPortForwardSessions not implemented")
}
func (UnimplementedNetworkerPluginServer) StartPortForwardSession(context.Context, *PortForwardSessionOptions) (*PortForwardSessionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPortForwardSession not implemented")
}
func (UnimplementedNetworkerPluginServer) ClosePortForwardSession(context.Context, *PortForwardSessionByIdRequest) (*PortForwardSessionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePortForwardSession not implemented")
}

// UnsafeNetworkerPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkerPluginServer will
// result in compilation errors.
type UnsafeNetworkerPluginServer interface {
	mustEmbedUnimplementedNetworkerPluginServer()
}

func RegisterNetworkerPluginServer(s grpc.ServiceRegistrar, srv NetworkerPluginServer) {
	s.RegisterService(&NetworkerPlugin_ServiceDesc, srv)
}

func _NetworkerPlugin_GetSupportedPortForwardTargets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerPluginServer).GetSupportedPortForwardTargets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkerPlugin_GetSupportedPortForwardTargets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerPluginServer).GetSupportedPortForwardTargets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkerPlugin_GetPortForwardSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortForwardSessionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerPluginServer).GetPortForwardSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkerPlugin_GetPortForwardSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerPluginServer).GetPortForwardSession(ctx, req.(*PortForwardSessionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkerPlugin_ListPortForwardSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerPluginServer).ListPortForwardSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkerPlugin_ListPortForwardSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerPluginServer).ListPortForwardSessions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkerPlugin_FindPortForwardSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPortForwardSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerPluginServer).FindPortForwardSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkerPlugin_FindPortForwardSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerPluginServer).FindPortForwardSessions(ctx, req.(*FindPortForwardSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkerPlugin_StartPortForwardSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortForwardSessionOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerPluginServer).StartPortForwardSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkerPlugin_StartPortForwardSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerPluginServer).StartPortForwardSession(ctx, req.(*PortForwardSessionOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkerPlugin_ClosePortForwardSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortForwardSessionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkerPluginServer).ClosePortForwardSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkerPlugin_ClosePortForwardSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkerPluginServer).ClosePortForwardSession(ctx, req.(*PortForwardSessionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkerPlugin_ServiceDesc is the grpc.ServiceDesc for NetworkerPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkerPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.omniview.pluginsdk.NetworkerPlugin",
	HandlerType: (*NetworkerPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSupportedPortForwardTargets",
			Handler:    _NetworkerPlugin_GetSupportedPortForwardTargets_Handler,
		},
		{
			MethodName: "GetPortForwardSession",
			Handler:    _NetworkerPlugin_GetPortForwardSession_Handler,
		},
		{
			MethodName: "ListPortForwardSessions",
			Handler:    _NetworkerPlugin_ListPortForwardSessions_Handler,
		},
		{
			MethodName: "FindPortForwardSessions",
			Handler:    _NetworkerPlugin_FindPortForwardSessions_Handler,
		},
		{
			MethodName: "StartPortForwardSession",
			Handler:    _NetworkerPlugin_StartPortForwardSession_Handler,
		},
		{
			MethodName: "ClosePortForwardSession",
			Handler:    _NetworkerPlugin_ClosePortForwardSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/networker.proto",
}
