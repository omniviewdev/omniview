// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: proto/networker.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PortForwardProtocol int32

const (
	PortForwardProtocol_TCP PortForwardProtocol = 0
	PortForwardProtocol_UDP PortForwardProtocol = 1
)

// Enum value maps for PortForwardProtocol.
var (
	PortForwardProtocol_name = map[int32]string{
		0: "TCP",
		1: "UDP",
	}
	PortForwardProtocol_value = map[string]int32{
		"TCP": 0,
		"UDP": 1,
	}
)

func (x PortForwardProtocol) Enum() *PortForwardProtocol {
	p := new(PortForwardProtocol)
	*p = x
	return p
}

func (x PortForwardProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortForwardProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_networker_proto_enumTypes[0].Descriptor()
}

func (PortForwardProtocol) Type() protoreflect.EnumType {
	return &file_proto_networker_proto_enumTypes[0]
}

func (x PortForwardProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortForwardProtocol.Descriptor instead.
func (PortForwardProtocol) EnumDescriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{0}
}

type PortForwardSession_SessionState int32

const (
	PortForwardSession_ACTIVE  PortForwardSession_SessionState = 0
	PortForwardSession_PAUSED  PortForwardSession_SessionState = 1
	PortForwardSession_STOPPED PortForwardSession_SessionState = 2
	PortForwardSession_FAILED  PortForwardSession_SessionState = 3
)

// Enum value maps for PortForwardSession_SessionState.
var (
	PortForwardSession_SessionState_name = map[int32]string{
		0: "ACTIVE",
		1: "PAUSED",
		2: "STOPPED",
		3: "FAILED",
	}
	PortForwardSession_SessionState_value = map[string]int32{
		"ACTIVE":  0,
		"PAUSED":  1,
		"STOPPED": 2,
		"FAILED":  3,
	}
)

func (x PortForwardSession_SessionState) Enum() *PortForwardSession_SessionState {
	p := new(PortForwardSession_SessionState)
	*p = x
	return p
}

func (x PortForwardSession_SessionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortForwardSession_SessionState) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_networker_proto_enumTypes[1].Descriptor()
}

func (PortForwardSession_SessionState) Type() protoreflect.EnumType {
	return &file_proto_networker_proto_enumTypes[1]
}

func (x PortForwardSession_SessionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortForwardSession_SessionState.Descriptor instead.
func (PortForwardSession_SessionState) EnumDescriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{0, 0}
}

// An active port forwarding session that is used to forward network traffic
// from a remote resource to the local machine. Common use cases include:
// - Kubernetes port forwarding
// - AWS SSM port forwarding
// - SSH port forwarding
type PortForwardSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SourcePort      int32                           `protobuf:"varint,2,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestinationPort int32                           `protobuf:"varint,3,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Protocol        PortForwardProtocol             `protobuf:"varint,4,opt,name=protocol,proto3,enum=com.omniview.pluginsdk.PortForwardProtocol" json:"protocol,omitempty"`
	CreatedAt       *timestamppb.Timestamp          `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp          `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Labels          map[string]string               `protobuf:"bytes,7,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	State           PortForwardSession_SessionState `protobuf:"varint,8,opt,name=state,proto3,enum=com.omniview.pluginsdk.PortForwardSession_SessionState" json:"state,omitempty"`
	Encryption      *PortForwardSessionEncryption   `protobuf:"bytes,9,opt,name=encryption,proto3" json:"encryption,omitempty"`
	// Types that are assignable to Connection:
	//
	//	*PortForwardSession_ResourceConnection
	//	*PortForwardSession_StaticConnection
	Connection isPortForwardSession_Connection `protobuf_oneof:"connection"`
}

func (x *PortForwardSession) Reset() {
	*x = PortForwardSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_networker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortForwardSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortForwardSession) ProtoMessage() {}

func (x *PortForwardSession) ProtoReflect() protoreflect.Message {
	mi := &file_proto_networker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortForwardSession.ProtoReflect.Descriptor instead.
func (*PortForwardSession) Descriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{0}
}

func (x *PortForwardSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PortForwardSession) GetSourcePort() int32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *PortForwardSession) GetDestinationPort() int32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *PortForwardSession) GetProtocol() PortForwardProtocol {
	if x != nil {
		return x.Protocol
	}
	return PortForwardProtocol_TCP
}

func (x *PortForwardSession) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *PortForwardSession) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *PortForwardSession) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PortForwardSession) GetState() PortForwardSession_SessionState {
	if x != nil {
		return x.State
	}
	return PortForwardSession_ACTIVE
}

func (x *PortForwardSession) GetEncryption() *PortForwardSessionEncryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (m *PortForwardSession) GetConnection() isPortForwardSession_Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (x *PortForwardSession) GetResourceConnection() *PortForwardResourceConnection {
	if x, ok := x.GetConnection().(*PortForwardSession_ResourceConnection); ok {
		return x.ResourceConnection
	}
	return nil
}

func (x *PortForwardSession) GetStaticConnection() *PortForwardStaticConnection {
	if x, ok := x.GetConnection().(*PortForwardSession_StaticConnection); ok {
		return x.StaticConnection
	}
	return nil
}

type isPortForwardSession_Connection interface {
	isPortForwardSession_Connection()
}

type PortForwardSession_ResourceConnection struct {
	ResourceConnection *PortForwardResourceConnection `protobuf:"bytes,20,opt,name=resource_connection,json=resourceConnection,proto3,oneof"`
}

type PortForwardSession_StaticConnection struct {
	StaticConnection *PortForwardStaticConnection `protobuf:"bytes,21,opt,name=static_connection,json=staticConnection,proto3,oneof"`
}

func (*PortForwardSession_ResourceConnection) isPortForwardSession_Connection() {}

func (*PortForwardSession_StaticConnection) isPortForwardSession_Connection() {}

// Port forwarding can happen to a resource via it's resource parameter, or via a static connection
// to a specific address and port. This message encapsulates the options for the connection
// to a resource.
type PortForwardResourceConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string           `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	PluginId     string           `protobuf:"bytes,2,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	ResourceId   string           `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceKey  string           `protobuf:"bytes,4,opt,name=resource_key,json=resourceKey,proto3" json:"resource_key,omitempty"`
	ResourceData *structpb.Struct `protobuf:"bytes,5,opt,name=resource_data,json=resourceData,proto3" json:"resource_data,omitempty"`
}

func (x *PortForwardResourceConnection) Reset() {
	*x = PortForwardResourceConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_networker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortForwardResourceConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortForwardResourceConnection) ProtoMessage() {}

func (x *PortForwardResourceConnection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_networker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortForwardResourceConnection.ProtoReflect.Descriptor instead.
func (*PortForwardResourceConnection) Descriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{1}
}

func (x *PortForwardResourceConnection) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *PortForwardResourceConnection) GetPluginId() string {
	if x != nil {
		return x.PluginId
	}
	return ""
}

func (x *PortForwardResourceConnection) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *PortForwardResourceConnection) GetResourceKey() string {
	if x != nil {
		return x.ResourceKey
	}
	return ""
}

func (x *PortForwardResourceConnection) GetResourceData() *structpb.Struct {
	if x != nil {
		return x.ResourceData
	}
	return nil
}

type PortForwardStaticConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IPv4 or IPv6 address
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *PortForwardStaticConnection) Reset() {
	*x = PortForwardStaticConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_networker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortForwardStaticConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortForwardStaticConnection) ProtoMessage() {}

func (x *PortForwardStaticConnection) ProtoReflect() protoreflect.Message {
	mi := &file_proto_networker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortForwardStaticConnection.ProtoReflect.Descriptor instead.
func (*PortForwardStaticConnection) Descriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{2}
}

func (x *PortForwardStaticConnection) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type PortForwardSessionEncryption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled   bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Algorithm string `protobuf:"bytes,2,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	Key       string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PortForwardSessionEncryption) Reset() {
	*x = PortForwardSessionEncryption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_networker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortForwardSessionEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortForwardSessionEncryption) ProtoMessage() {}

func (x *PortForwardSessionEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_networker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortForwardSessionEncryption.ProtoReflect.Descriptor instead.
func (*PortForwardSessionEncryption) Descriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{3}
}

func (x *PortForwardSessionEncryption) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PortForwardSessionEncryption) GetAlgorithm() string {
	if x != nil {
		return x.Algorithm
	}
	return ""
}

func (x *PortForwardSessionEncryption) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Options for creating a new port forwarding session
type PortForwardSessionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePort      int32                         `protobuf:"varint,1,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty"`
	DestinationPort int32                         `protobuf:"varint,2,opt,name=destination_port,json=destinationPort,proto3" json:"destination_port,omitempty"`
	Protocol        PortForwardProtocol           `protobuf:"varint,3,opt,name=protocol,proto3,enum=com.omniview.pluginsdk.PortForwardProtocol" json:"protocol,omitempty"`
	Labels          map[string]string             `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Params          map[string]string             `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Encryption      *PortForwardSessionEncryption `protobuf:"bytes,6,opt,name=encryption,proto3" json:"encryption,omitempty"`
	// Types that are assignable to Connection:
	//
	//	*PortForwardSessionOptions_ResourceConnection
	//	*PortForwardSessionOptions_StaticConnection
	Connection isPortForwardSessionOptions_Connection `protobuf_oneof:"connection"`
}

func (x *PortForwardSessionOptions) Reset() {
	*x = PortForwardSessionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_networker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortForwardSessionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortForwardSessionOptions) ProtoMessage() {}

func (x *PortForwardSessionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_networker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortForwardSessionOptions.ProtoReflect.Descriptor instead.
func (*PortForwardSessionOptions) Descriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{4}
}

func (x *PortForwardSessionOptions) GetSourcePort() int32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *PortForwardSessionOptions) GetDestinationPort() int32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *PortForwardSessionOptions) GetProtocol() PortForwardProtocol {
	if x != nil {
		return x.Protocol
	}
	return PortForwardProtocol_TCP
}

func (x *PortForwardSessionOptions) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *PortForwardSessionOptions) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *PortForwardSessionOptions) GetEncryption() *PortForwardSessionEncryption {
	if x != nil {
		return x.Encryption
	}
	return nil
}

func (m *PortForwardSessionOptions) GetConnection() isPortForwardSessionOptions_Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (x *PortForwardSessionOptions) GetResourceConnection() *PortForwardResourceConnection {
	if x, ok := x.GetConnection().(*PortForwardSessionOptions_ResourceConnection); ok {
		return x.ResourceConnection
	}
	return nil
}

func (x *PortForwardSessionOptions) GetStaticConnection() *PortForwardStaticConnection {
	if x, ok := x.GetConnection().(*PortForwardSessionOptions_StaticConnection); ok {
		return x.StaticConnection
	}
	return nil
}

type isPortForwardSessionOptions_Connection interface {
	isPortForwardSessionOptions_Connection()
}

type PortForwardSessionOptions_ResourceConnection struct {
	ResourceConnection *PortForwardResourceConnection `protobuf:"bytes,10,opt,name=resource_connection,json=resourceConnection,proto3,oneof"`
}

type PortForwardSessionOptions_StaticConnection struct {
	StaticConnection *PortForwardStaticConnection `protobuf:"bytes,11,opt,name=static_connection,json=staticConnection,proto3,oneof"`
}

func (*PortForwardSessionOptions_ResourceConnection) isPortForwardSessionOptions_Connection() {}

func (*PortForwardSessionOptions_StaticConnection) isPortForwardSessionOptions_Connection() {}

type PortForwardSessionByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PortForwardSessionByIdRequest) Reset() {
	*x = PortForwardSessionByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_networker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortForwardSessionByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortForwardSessionByIdRequest) ProtoMessage() {}

func (x *PortForwardSessionByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_networker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortForwardSessionByIdRequest.ProtoReflect.Descriptor instead.
func (*PortForwardSessionByIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{5}
}

func (x *PortForwardSessionByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type FindPortForwardSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId   string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *FindPortForwardSessionRequest) Reset() {
	*x = FindPortForwardSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_networker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindPortForwardSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPortForwardSessionRequest) ProtoMessage() {}

func (x *FindPortForwardSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_networker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPortForwardSessionRequest.ProtoReflect.Descriptor instead.
func (*FindPortForwardSessionRequest) Descriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{6}
}

func (x *FindPortForwardSessionRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *FindPortForwardSessionRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type PortForwardSessionByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *PortForwardSession `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *PortForwardSessionByIdResponse) Reset() {
	*x = PortForwardSessionByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_networker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortForwardSessionByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortForwardSessionByIdResponse) ProtoMessage() {}

func (x *PortForwardSessionByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_networker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortForwardSessionByIdResponse.ProtoReflect.Descriptor instead.
func (*PortForwardSessionByIdResponse) Descriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{7}
}

func (x *PortForwardSessionByIdResponse) GetSession() *PortForwardSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type PortForwardSessionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sessions []*PortForwardSession `protobuf:"bytes,1,rep,name=sessions,proto3" json:"sessions,omitempty"`
}

func (x *PortForwardSessionListResponse) Reset() {
	*x = PortForwardSessionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_networker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortForwardSessionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortForwardSessionListResponse) ProtoMessage() {}

func (x *PortForwardSessionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_networker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortForwardSessionListResponse.ProtoReflect.Descriptor instead.
func (*PortForwardSessionListResponse) Descriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{8}
}

func (x *PortForwardSessionListResponse) GetSessions() []*PortForwardSession {
	if x != nil {
		return x.Sessions
	}
	return nil
}

type GetSupportedPortForwardTargetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []string `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
}

func (x *GetSupportedPortForwardTargetsResponse) Reset() {
	*x = GetSupportedPortForwardTargetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_networker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSupportedPortForwardTargetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSupportedPortForwardTargetsResponse) ProtoMessage() {}

func (x *GetSupportedPortForwardTargetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_networker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSupportedPortForwardTargetsResponse.ProtoReflect.Descriptor instead.
func (*GetSupportedPortForwardTargetsResponse) Descriptor() ([]byte, []int) {
	return file_proto_networker_proto_rawDescGZIP(), []int{9}
}

func (x *GetSupportedPortForwardTargetsResponse) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

var File_proto_networker_proto protoreflect.FileDescriptor

var file_proto_networker_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e,
	0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xfc, 0x06, 0x0a, 0x12, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e,
	0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e,
	0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x68, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x3f, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f,
	0x50, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xe3, 0x01, 0x0a, 0x1d, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x37, 0x0a, 0x1b, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x68, 0x0a, 0x1c, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x86, 0x06, 0x0a, 0x19, 0x50, 0x6f,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x55, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x68, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x1d, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x65, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x1e, 0x50, 0x6f,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x68, 0x0a, 0x1e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e,
	0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x26,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2a, 0x27, 0x0a, 0x13, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x54,
	0x43, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x01, 0x32, 0x9c, 0x06,
	0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x12, 0x78, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x3e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d,
	0x6e, 0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x88, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x17, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e,
	0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73,
	0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x88, 0x01, 0x0a, 0x17, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6f, 0x6d, 0x6e, 0x69, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x73, 0x64, 0x6b, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07,
	0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_networker_proto_rawDescOnce sync.Once
	file_proto_networker_proto_rawDescData = file_proto_networker_proto_rawDesc
)

func file_proto_networker_proto_rawDescGZIP() []byte {
	file_proto_networker_proto_rawDescOnce.Do(func() {
		file_proto_networker_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_networker_proto_rawDescData)
	})
	return file_proto_networker_proto_rawDescData
}

var file_proto_networker_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_networker_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_networker_proto_goTypes = []any{
	(PortForwardProtocol)(0),                       // 0: com.omniview.pluginsdk.PortForwardProtocol
	(PortForwardSession_SessionState)(0),           // 1: com.omniview.pluginsdk.PortForwardSession.SessionState
	(*PortForwardSession)(nil),                     // 2: com.omniview.pluginsdk.PortForwardSession
	(*PortForwardResourceConnection)(nil),          // 3: com.omniview.pluginsdk.PortForwardResourceConnection
	(*PortForwardStaticConnection)(nil),            // 4: com.omniview.pluginsdk.PortForwardStaticConnection
	(*PortForwardSessionEncryption)(nil),           // 5: com.omniview.pluginsdk.PortForwardSessionEncryption
	(*PortForwardSessionOptions)(nil),              // 6: com.omniview.pluginsdk.PortForwardSessionOptions
	(*PortForwardSessionByIdRequest)(nil),          // 7: com.omniview.pluginsdk.PortForwardSessionByIdRequest
	(*FindPortForwardSessionRequest)(nil),          // 8: com.omniview.pluginsdk.FindPortForwardSessionRequest
	(*PortForwardSessionByIdResponse)(nil),         // 9: com.omniview.pluginsdk.PortForwardSessionByIdResponse
	(*PortForwardSessionListResponse)(nil),         // 10: com.omniview.pluginsdk.PortForwardSessionListResponse
	(*GetSupportedPortForwardTargetsResponse)(nil), // 11: com.omniview.pluginsdk.GetSupportedPortForwardTargetsResponse
	nil,                           // 12: com.omniview.pluginsdk.PortForwardSession.LabelsEntry
	nil,                           // 13: com.omniview.pluginsdk.PortForwardSessionOptions.LabelsEntry
	nil,                           // 14: com.omniview.pluginsdk.PortForwardSessionOptions.ParamsEntry
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
	(*structpb.Struct)(nil),       // 16: google.protobuf.Struct
	(*emptypb.Empty)(nil),         // 17: google.protobuf.Empty
}
var file_proto_networker_proto_depIdxs = []int32{
	0,  // 0: com.omniview.pluginsdk.PortForwardSession.protocol:type_name -> com.omniview.pluginsdk.PortForwardProtocol
	15, // 1: com.omniview.pluginsdk.PortForwardSession.created_at:type_name -> google.protobuf.Timestamp
	15, // 2: com.omniview.pluginsdk.PortForwardSession.updated_at:type_name -> google.protobuf.Timestamp
	12, // 3: com.omniview.pluginsdk.PortForwardSession.labels:type_name -> com.omniview.pluginsdk.PortForwardSession.LabelsEntry
	1,  // 4: com.omniview.pluginsdk.PortForwardSession.state:type_name -> com.omniview.pluginsdk.PortForwardSession.SessionState
	5,  // 5: com.omniview.pluginsdk.PortForwardSession.encryption:type_name -> com.omniview.pluginsdk.PortForwardSessionEncryption
	3,  // 6: com.omniview.pluginsdk.PortForwardSession.resource_connection:type_name -> com.omniview.pluginsdk.PortForwardResourceConnection
	4,  // 7: com.omniview.pluginsdk.PortForwardSession.static_connection:type_name -> com.omniview.pluginsdk.PortForwardStaticConnection
	16, // 8: com.omniview.pluginsdk.PortForwardResourceConnection.resource_data:type_name -> google.protobuf.Struct
	0,  // 9: com.omniview.pluginsdk.PortForwardSessionOptions.protocol:type_name -> com.omniview.pluginsdk.PortForwardProtocol
	13, // 10: com.omniview.pluginsdk.PortForwardSessionOptions.labels:type_name -> com.omniview.pluginsdk.PortForwardSessionOptions.LabelsEntry
	14, // 11: com.omniview.pluginsdk.PortForwardSessionOptions.params:type_name -> com.omniview.pluginsdk.PortForwardSessionOptions.ParamsEntry
	5,  // 12: com.omniview.pluginsdk.PortForwardSessionOptions.encryption:type_name -> com.omniview.pluginsdk.PortForwardSessionEncryption
	3,  // 13: com.omniview.pluginsdk.PortForwardSessionOptions.resource_connection:type_name -> com.omniview.pluginsdk.PortForwardResourceConnection
	4,  // 14: com.omniview.pluginsdk.PortForwardSessionOptions.static_connection:type_name -> com.omniview.pluginsdk.PortForwardStaticConnection
	2,  // 15: com.omniview.pluginsdk.PortForwardSessionByIdResponse.session:type_name -> com.omniview.pluginsdk.PortForwardSession
	2,  // 16: com.omniview.pluginsdk.PortForwardSessionListResponse.sessions:type_name -> com.omniview.pluginsdk.PortForwardSession
	17, // 17: com.omniview.pluginsdk.NetworkerPlugin.GetSupportedPortForwardTargets:input_type -> google.protobuf.Empty
	7,  // 18: com.omniview.pluginsdk.NetworkerPlugin.GetPortForwardSession:input_type -> com.omniview.pluginsdk.PortForwardSessionByIdRequest
	17, // 19: com.omniview.pluginsdk.NetworkerPlugin.ListPortForwardSessions:input_type -> google.protobuf.Empty
	8,  // 20: com.omniview.pluginsdk.NetworkerPlugin.FindPortForwardSessions:input_type -> com.omniview.pluginsdk.FindPortForwardSessionRequest
	6,  // 21: com.omniview.pluginsdk.NetworkerPlugin.StartPortForwardSession:input_type -> com.omniview.pluginsdk.PortForwardSessionOptions
	7,  // 22: com.omniview.pluginsdk.NetworkerPlugin.ClosePortForwardSession:input_type -> com.omniview.pluginsdk.PortForwardSessionByIdRequest
	11, // 23: com.omniview.pluginsdk.NetworkerPlugin.GetSupportedPortForwardTargets:output_type -> com.omniview.pluginsdk.GetSupportedPortForwardTargetsResponse
	9,  // 24: com.omniview.pluginsdk.NetworkerPlugin.GetPortForwardSession:output_type -> com.omniview.pluginsdk.PortForwardSessionByIdResponse
	10, // 25: com.omniview.pluginsdk.NetworkerPlugin.ListPortForwardSessions:output_type -> com.omniview.pluginsdk.PortForwardSessionListResponse
	10, // 26: com.omniview.pluginsdk.NetworkerPlugin.FindPortForwardSessions:output_type -> com.omniview.pluginsdk.PortForwardSessionListResponse
	9,  // 27: com.omniview.pluginsdk.NetworkerPlugin.StartPortForwardSession:output_type -> com.omniview.pluginsdk.PortForwardSessionByIdResponse
	9,  // 28: com.omniview.pluginsdk.NetworkerPlugin.ClosePortForwardSession:output_type -> com.omniview.pluginsdk.PortForwardSessionByIdResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_proto_networker_proto_init() }
func file_proto_networker_proto_init() {
	if File_proto_networker_proto != nil {
		return
	}
	file_proto_resource_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_networker_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*PortForwardSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_networker_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*PortForwardResourceConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_networker_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PortForwardStaticConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_networker_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*PortForwardSessionEncryption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_networker_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*PortForwardSessionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_networker_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PortForwardSessionByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_networker_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FindPortForwardSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_networker_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*PortForwardSessionByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_networker_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PortForwardSessionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_networker_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetSupportedPortForwardTargetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_networker_proto_msgTypes[0].OneofWrappers = []any{
		(*PortForwardSession_ResourceConnection)(nil),
		(*PortForwardSession_StaticConnection)(nil),
	}
	file_proto_networker_proto_msgTypes[4].OneofWrappers = []any{
		(*PortForwardSessionOptions_ResourceConnection)(nil),
		(*PortForwardSessionOptions_StaticConnection)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_networker_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_networker_proto_goTypes,
		DependencyIndexes: file_proto_networker_proto_depIdxs,
		EnumInfos:         file_proto_networker_proto_enumTypes,
		MessageInfos:      file_proto_networker_proto_msgTypes,
	}.Build()
	File_proto_networker_proto = out.File
	file_proto_networker_proto_rawDesc = nil
	file_proto_networker_proto_goTypes = nil
	file_proto_networker_proto_depIdxs = nil
}
